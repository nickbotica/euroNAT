; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\Michael\Desktop\Code\euroNAT\euroNatRadarScreen.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4CFont@@6B@					; CFont::`RTTI Complete Object Locator'
PUBLIC	??_R3CFont@@8					; CFont::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFont@@8					; CFont::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFont@@8				; CFont::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCFont@@@8				; CFont `RTTI Type Descriptor'
PUBLIC	??_R4euroNatRadarScreen@@6B@			; euroNatRadarScreen::`RTTI Complete Object Locator'
PUBLIC	??_R3euroNatRadarScreen@@8			; euroNatRadarScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2euroNatRadarScreen@@8			; euroNatRadarScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CRadarScreen@EuroScopePlugIn@@8	; EuroScopePlugIn::CRadarScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3CRadarScreen@EuroScopePlugIn@@8		; EuroScopePlugIn::CRadarScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CRadarScreen@EuroScopePlugIn@@8		; EuroScopePlugIn::CRadarScreen::`RTTI Base Class Array'
PUBLIC	??_R0?AVCRadarScreen@EuroScopePlugIn@@@8	; EuroScopePlugIn::CRadarScreen `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@euroNatRadarScreen@@8		; euroNatRadarScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVeuroNatRadarScreen@@@8			; euroNatRadarScreen `RTTI Type Descriptor'
PUBLIC	?SetPixel@CDC@@QAEKHHK@Z			; CDC::SetPixel
PUBLIC	??0CGdiObject@@QAE@XZ				; CGdiObject::CGdiObject
PUBLIC	??1CFont@@UAE@XZ				; CFont::~CFont
PUBLIC	??_GCFont@@UAEPAXI@Z				; CFont::`scalar deleting destructor'
PUBLIC	??0CFont@@QAE@XZ				; CFont::CFont
PUBLIC	?CreateFontA@CFont@@QAEHHHHHHEEEEEEEEPBD@Z	; CFont::CreateFontA
PUBLIC	??2CObject@@SGPAXI@Z				; CObject::operator new
PUBLIC	?FloodCharacters@?$ChTraitsCRT@D@ATL@@SAXDHPAD@Z ; ATL::ChTraitsCRT<char>::FloodCharacters
PUBLIC	??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
PUBLIC	?Concatenate@?$CSimpleStringT@D$0A@@ATL@@KAXAAV12@PBDH1H@Z ; ATL::CSimpleStringT<char,0>::Concatenate
PUBLIC	??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
PUBLIC	??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z ; ATL::operator+
PUBLIC	??9ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z ; ATL::operator!=
PUBLIC	??0CRect@@QAE@HHHH@Z				; CRect::CRect
PUBLIC	??0CPoint@@QAE@UtagPOINT@@@Z			; CPoint::CPoint
PUBLIC	?GetCurrentPosition@CDC@@QBE?AVCPoint@@XZ	; CDC::GetCurrentPosition
PUBLIC	?MoveTo@CDC@@QAE?AVCPoint@@UtagPOINT@@@Z	; CDC::MoveTo
PUBLIC	?LineTo@CDC@@QAEHUtagPOINT@@@Z			; CDC::LineTo
PUBLIC	?Rectangle@CDC@@QAEHHHHH@Z			; CDC::Rectangle
PUBLIC	?TextOutA@CDC@@QAEHHHABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CDC::TextOutA
PUBLIC	?DrawTextExA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z ; CDC::DrawTextExA
PUBLIC	?SelectObject@CDC@@QAEPAXPAX@Z			; CDC::SelectObject
PUBLIC	?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z ; euroNatRadarScreen::OnRefresh
PUBLIC	?OnOverScreenObject@euroNatRadarScreen@@UAEXHPBDUtagPOINT@@UtagRECT@@@Z ; euroNatRadarScreen::OnOverScreenObject
PUBLIC	?OnAsrContentToBeSaved@euroNatRadarScreen@@UAEXXZ ; euroNatRadarScreen::OnAsrContentToBeSaved
PUBLIC	?OnAsrContentLoaded@euroNatRadarScreen@@UAEX_N@Z ; euroNatRadarScreen::OnAsrContentLoaded
PUBLIC	?OnAsrContentToBeClosed@euroNatRadarScreen@@UAEXXZ ; euroNatRadarScreen::OnAsrContentToBeClosed
PUBLIC	??_GeuroNatRadarScreen@@UAEPAXI@Z		; euroNatRadarScreen::`scalar deleting destructor'
PUBLIC	??_C@_09DGOPBADF@EuroScope?$AA@			; `string'
PUBLIC	??_C@_06HOJDLJEN@SKIPME?$AA@			; `string'
PUBLIC	??_C@_0BH@ONKKIKM@NAT?3S?$CFc?5?5?5Concorde?5SST?$AA@ ; `string'
PUBLIC	??_C@_04DHLACFEG@East?$AA@			; `string'
PUBLIC	??_C@_04KCPCHGPD@West?$AA@			; `string'
PUBLIC	??_C@_0BF@EKOGINPJ@NAT?3?$CFc?5?5?5TMI?3?$CFd?5?5?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_04EMLCEKPO@FLs?3?$AA@			; `string'
PUBLIC	??_C@_09FFOGKOIK@FLs?3?5500?$CL?$AA@		; `string'
PUBLIC	??_C@_0BE@BGMOGNCJ@Loading?5NAT?5Data?4?4?4?$AA@ ; `string'
PUBLIC	??_7euroNatRadarScreen@@6B@			; euroNatRadarScreen::`vftable'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7CFont@@6B@					; CFont::`vftable'
EXTRN	?OnFunctionCall@CRadarScreen@EuroScopePlugIn@@UAEXHPBDUtagPOINT@@UtagRECT@@@Z:PROC ; EuroScopePlugIn::CRadarScreen::OnFunctionCall
EXTRN	?OnMoveScreenObject@CRadarScreen@EuroScopePlugIn@@UAEXHPBDUtagPOINT@@UtagRECT@@_N@Z:PROC ; EuroScopePlugIn::CRadarScreen::OnMoveScreenObject
EXTRN	?OnDoubleClickScreenObject@CRadarScreen@EuroScopePlugIn@@UAEXHPBDUtagPOINT@@UtagRECT@@H@Z:PROC ; EuroScopePlugIn::CRadarScreen::OnDoubleClickScreenObject
EXTRN	?OnClickScreenObject@CRadarScreen@EuroScopePlugIn@@UAEXHPBDUtagPOINT@@UtagRECT@@H@Z:PROC ; EuroScopePlugIn::CRadarScreen::OnClickScreenObject
EXTRN	?OnCompileCommand@CRadarScreen@EuroScopePlugIn@@UAE_NPBD@Z:PROC ; EuroScopePlugIn::CRadarScreen::OnCompileCommand
EXTRN	?OnAircraftFlightStripPushed@CRadarScreen@EuroScopePlugIn@@UAEXVCAircraft@2@PBD1@Z:PROC ; EuroScopePlugIn::CRadarScreen::OnAircraftFlightStripPushed
EXTRN	?OnAircraftControllerAssignedDataUpdate@CRadarScreen@EuroScopePlugIn@@UAEXVCAircraft@2@H@Z:PROC ; EuroScopePlugIn::CRadarScreen::OnAircraftControllerAssignedDataUpdate
EXTRN	?OnAircraftFlightPlanUpdate@CRadarScreen@EuroScopePlugIn@@UAEXVCAircraft@2@@Z:PROC ; EuroScopePlugIn::CRadarScreen::OnAircraftFlightPlanUpdate
EXTRN	?OnAircraftDisconnect@CRadarScreen@EuroScopePlugIn@@UAEXVCAircraft@2@@Z:PROC ; EuroScopePlugIn::CRadarScreen::OnAircraftDisconnect
EXTRN	?OnAircraftPositionUpdate@CRadarScreen@EuroScopePlugIn@@UAEXVCAircraft@2@@Z:PROC ; EuroScopePlugIn::CRadarScreen::OnAircraftPositionUpdate
EXTRN	?OnControllerDisconnect@CRadarScreen@EuroScopePlugIn@@UAEXVCController@2@@Z:PROC ; EuroScopePlugIn::CRadarScreen::OnControllerDisconnect
EXTRN	?OnControllerPositionUpdate@CRadarScreen@EuroScopePlugIn@@UAEXVCController@2@@Z:PROC ; EuroScopePlugIn::CRadarScreen::OnControllerPositionUpdate
EXTRN	__imp__GetPixel@12:PROC
EXTRN	__imp__SetPixel@16:PROC
EXTRN	?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ:PROC ; CFont::GetRuntimeClass
EXTRN	??_ECFont@@UAEPAXI@Z:PROC			; CFont::`vector deleting destructor'
EXTRN	__imp__CreateFontA@56:PROC
EXTRN	?Attach@CGdiObject@@QAEHPAX@Z:PROC		; CGdiObject::Attach
EXTRN	__imp_??0CRadarScreen@EuroScopePlugIn@@QAE@XZ:PROC
EXTRN	__imp_?OnControllerPositionUpdate@CRadarScreen@EuroScopePlugIn@@UAEXVCController@2@@Z:PROC
EXTRN	__imp_?OnControllerDisconnect@CRadarScreen@EuroScopePlugIn@@UAEXVCController@2@@Z:PROC
EXTRN	__imp_?OnAircraftPositionUpdate@CRadarScreen@EuroScopePlugIn@@UAEXVCAircraft@2@@Z:PROC
EXTRN	__imp_?OnAircraftDisconnect@CRadarScreen@EuroScopePlugIn@@UAEXVCAircraft@2@@Z:PROC
EXTRN	__imp_?OnAircraftFlightPlanUpdate@CRadarScreen@EuroScopePlugIn@@UAEXVCAircraft@2@@Z:PROC
EXTRN	__imp_?OnAircraftControllerAssignedDataUpdate@CRadarScreen@EuroScopePlugIn@@UAEXVCAircraft@2@H@Z:PROC
EXTRN	__imp_?OnAircraftFlightStripPushed@CRadarScreen@EuroScopePlugIn@@UAEXVCAircraft@2@PBD1@Z:PROC
EXTRN	__imp_?OnCompileCommand@CRadarScreen@EuroScopePlugIn@@UAE_NPBD@Z:PROC
EXTRN	__imp_?OnClickScreenObject@CRadarScreen@EuroScopePlugIn@@UAEXHPBDUtagPOINT@@UtagRECT@@H@Z:PROC
EXTRN	__imp_?OnDoubleClickScreenObject@CRadarScreen@EuroScopePlugIn@@UAEXHPBDUtagPOINT@@UtagRECT@@H@Z:PROC
EXTRN	__imp_?OnMoveScreenObject@CRadarScreen@EuroScopePlugIn@@UAEXHPBDUtagPOINT@@UtagRECT@@_N@Z:PROC
EXTRN	__imp_?OnFunctionCall@CRadarScreen@EuroScopePlugIn@@UAEXHPBDUtagPOINT@@UtagRECT@@@Z:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__ExtCreatePen@20:PROC
EXTRN	__imp__GetCursorPos@4:PROC
EXTRN	??0CPen@@QAE@HHK@Z:PROC				; CPen::CPen
EXTRN	??0CBrush@@QAE@K@Z:PROC				; CBrush::CBrush
EXTRN	?Attach@CDC@@QAEHPAUHDC__@@@Z:PROC		; CDC::Attach
EXTRN	?Detach@CDC@@QAEPAUHDC__@@XZ:PROC		; CDC::Detach
EXTRN	??0CDC@@QAE@XZ:PROC				; CDC::CDC
EXTRN	?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z:PROC	; CDC::SelectObject
EXTRN	?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z:PROC	; CDC::SelectObject
EXTRN	?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z:PROC	; CDC::SelectObject
EXTRN	?SetTextColor@CDC@@UAEKK@Z:PROC			; CDC::SetTextColor
EXTRN	__imp__GetCurrentPositionEx@8:PROC
EXTRN	?MoveTo@CDC@@QAE?AVCPoint@@HH@Z:PROC		; CDC::MoveTo
EXTRN	?LineTo@CDC@@QAEHHH@Z:PROC			; CDC::LineTo
EXTRN	__imp__Rectangle@20:PROC
EXTRN	??1CDC@@UAE@XZ:PROC				; CDC::~CDC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp_?GetRadarArea@CRadarScreen@EuroScopePlugIn@@QAE?AUtagRECT@@XZ:PROC
EXTRN	__imp_?ConvertCoordFromPositionToPixel@CRadarScreen@EuroScopePlugIn@@QAE?AUtagPOINT@@VCPosition@2@@Z:PROC
EXTRN	__imp_?AddScreenObject@CRadarScreen@EuroScopePlugIn@@QAEXHPBDUtagRECT@@_N0@Z:PROC
EXTRN	__imp_?RequestRefresh@CRadarScreen@EuroScopePlugIn@@QAEXXZ:PROC
EXTRN	__imp_?GetPlugIn@CRadarScreen@EuroScopePlugIn@@QAEPAVCPlugIn@2@XZ:PROC
EXTRN	??_EeuroNatRadarScreen@@UAEPAXI@Z:PROC		; euroNatRadarScreen::`vector deleting destructor'
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT
??_7CFont@@6B@ DD FLAT:??_R4CFont@@6B@			; CFont::`vftable'
	DD	FLAT:?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECFont@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
CONST	ENDS
;	COMDAT ??_R4CFont@@6B@
rdata$r	SEGMENT
??_R4CFont@@6B@ DD 00H					; CFont::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFont@@@8
	DD	FLAT:??_R3CFont@@8
rdata$r	ENDS
;	COMDAT ??_R3CFont@@8
rdata$r	SEGMENT
??_R3CFont@@8 DD 00H					; CFont::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CFont@@8
rdata$r	ENDS
;	COMDAT ??_R2CFont@@8
rdata$r	SEGMENT
??_R2CFont@@8 DD FLAT:??_R1A@?0A@EA@CFont@@8		; CFont::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFont@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFont@@8 DD FLAT:??_R0?AVCFont@@@8	; CFont::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFont@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFont@@@8
_DATA	SEGMENT
??_R0?AVCFont@@@8 DD FLAT:??_7type_info@@6B@		; CFont `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFont@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7euroNatRadarScreen@@6B@
CONST	SEGMENT
??_7euroNatRadarScreen@@6B@ DD FLAT:??_R4euroNatRadarScreen@@6B@ ; euroNatRadarScreen::`vftable'
	DD	FLAT:?OnAsrContentLoaded@euroNatRadarScreen@@UAEX_N@Z
	DD	FLAT:?OnAsrContentToBeSaved@euroNatRadarScreen@@UAEXXZ
	DD	FLAT:?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z
	DD	FLAT:?OnAsrContentToBeClosed@euroNatRadarScreen@@UAEXXZ
	DD	FLAT:?OnControllerPositionUpdate@CRadarScreen@EuroScopePlugIn@@UAEXVCController@2@@Z
	DD	FLAT:?OnControllerDisconnect@CRadarScreen@EuroScopePlugIn@@UAEXVCController@2@@Z
	DD	FLAT:?OnAircraftPositionUpdate@CRadarScreen@EuroScopePlugIn@@UAEXVCAircraft@2@@Z
	DD	FLAT:?OnAircraftDisconnect@CRadarScreen@EuroScopePlugIn@@UAEXVCAircraft@2@@Z
	DD	FLAT:?OnAircraftFlightPlanUpdate@CRadarScreen@EuroScopePlugIn@@UAEXVCAircraft@2@@Z
	DD	FLAT:?OnAircraftControllerAssignedDataUpdate@CRadarScreen@EuroScopePlugIn@@UAEXVCAircraft@2@H@Z
	DD	FLAT:?OnAircraftFlightStripPushed@CRadarScreen@EuroScopePlugIn@@UAEXVCAircraft@2@PBD1@Z
	DD	FLAT:?OnCompileCommand@CRadarScreen@EuroScopePlugIn@@UAE_NPBD@Z
	DD	FLAT:?OnOverScreenObject@euroNatRadarScreen@@UAEXHPBDUtagPOINT@@UtagRECT@@@Z
	DD	FLAT:?OnClickScreenObject@CRadarScreen@EuroScopePlugIn@@UAEXHPBDUtagPOINT@@UtagRECT@@H@Z
	DD	FLAT:?OnDoubleClickScreenObject@CRadarScreen@EuroScopePlugIn@@UAEXHPBDUtagPOINT@@UtagRECT@@H@Z
	DD	FLAT:?OnMoveScreenObject@CRadarScreen@EuroScopePlugIn@@UAEXHPBDUtagPOINT@@UtagRECT@@_N@Z
	DD	FLAT:?OnFunctionCall@CRadarScreen@EuroScopePlugIn@@UAEXHPBDUtagPOINT@@UtagRECT@@@Z
	DD	FLAT:??_EeuroNatRadarScreen@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4euroNatRadarScreen@@6B@
rdata$r	SEGMENT
??_R4euroNatRadarScreen@@6B@ DD 00H			; euroNatRadarScreen::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVeuroNatRadarScreen@@@8
	DD	FLAT:??_R3euroNatRadarScreen@@8
rdata$r	ENDS
;	COMDAT ??_R3euroNatRadarScreen@@8
rdata$r	SEGMENT
??_R3euroNatRadarScreen@@8 DD 00H			; euroNatRadarScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2euroNatRadarScreen@@8
rdata$r	ENDS
;	COMDAT ??_R2euroNatRadarScreen@@8
rdata$r	SEGMENT
??_R2euroNatRadarScreen@@8 DD FLAT:??_R1A@?0A@EA@euroNatRadarScreen@@8 ; euroNatRadarScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CRadarScreen@EuroScopePlugIn@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CRadarScreen@EuroScopePlugIn@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CRadarScreen@EuroScopePlugIn@@8 DD FLAT:??_R0?AVCRadarScreen@EuroScopePlugIn@@@8 ; EuroScopePlugIn::CRadarScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRadarScreen@EuroScopePlugIn@@8
rdata$r	ENDS
;	COMDAT ??_R3CRadarScreen@EuroScopePlugIn@@8
rdata$r	SEGMENT
??_R3CRadarScreen@EuroScopePlugIn@@8 DD 00H		; EuroScopePlugIn::CRadarScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CRadarScreen@EuroScopePlugIn@@8
rdata$r	ENDS
;	COMDAT ??_R2CRadarScreen@EuroScopePlugIn@@8
rdata$r	SEGMENT
??_R2CRadarScreen@EuroScopePlugIn@@8 DD FLAT:??_R1A@?0A@EA@CRadarScreen@EuroScopePlugIn@@8 ; EuroScopePlugIn::CRadarScreen::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R0?AVCRadarScreen@EuroScopePlugIn@@@8
_DATA	SEGMENT
??_R0?AVCRadarScreen@EuroScopePlugIn@@@8 DD FLAT:??_7type_info@@6B@ ; EuroScopePlugIn::CRadarScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRadarScreen@EuroScopePlugIn@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@euroNatRadarScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@euroNatRadarScreen@@8 DD FLAT:??_R0?AVeuroNatRadarScreen@@@8 ; euroNatRadarScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3euroNatRadarScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVeuroNatRadarScreen@@@8
_DATA	SEGMENT
??_R0?AVeuroNatRadarScreen@@@8 DD FLAT:??_7type_info@@6B@ ; euroNatRadarScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVeuroNatRadarScreen@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0BE@BGMOGNCJ@Loading?5NAT?5Data?4?4?4?$AA@
CONST	SEGMENT
??_C@_0BE@BGMOGNCJ@Loading?5NAT?5Data?4?4?4?$AA@ DB 'Loading NAT Data...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FFOGKOIK@FLs?3?5500?$CL?$AA@
CONST	SEGMENT
??_C@_09FFOGKOIK@FLs?3?5500?$CL?$AA@ DB 'FLs: 500+', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04EMLCEKPO@FLs?3?$AA@
CONST	SEGMENT
??_C@_04EMLCEKPO@FLs?3?$AA@ DB 'FLs:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EKOGINPJ@NAT?3?$CFc?5?5?5TMI?3?$CFd?5?5?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BF@EKOGINPJ@NAT?3?$CFc?5?5?5TMI?3?$CFd?5?5?5?$CFs?$AA@ DB 'NAT:%c '
	DB	'  TMI:%d   %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04KCPCHGPD@West?$AA@
CONST	SEGMENT
??_C@_04KCPCHGPD@West?$AA@ DB 'West', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DHLACFEG@East?$AA@
CONST	SEGMENT
??_C@_04DHLACFEG@East?$AA@ DB 'East', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@ONKKIKM@NAT?3S?$CFc?5?5?5Concorde?5SST?$AA@
CONST	SEGMENT
??_C@_0BH@ONKKIKM@NAT?3S?$CFc?5?5?5Concorde?5SST?$AA@ DB 'NAT:S%c   Conco'
	DB	'rde SST', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOJDLJEN@SKIPME?$AA@
CONST	SEGMENT
??_C@_06HOJDLJEN@SKIPME?$AA@ DB 'SKIPME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09DGOPBADF@EuroScope?$AA@
CONST	SEGMENT
??_C@_09DGOPBADF@EuroScope?$AA@ DB 'EuroScope', 00H	; `string'
; Function compile flags: /Ogtp
;	COMDAT ?SetPixel@CDC@@QAEKHHK@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_crColor$ = 16						; size = 4
?SetPixel@CDC@@QAEKHHK@Z PROC				; CDC::SetPixel, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\afxwin1.inl
; Line 571
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _crColor$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	push	eax
	mov	eax, DWORD PTR _x$[ebp]
	push	edx
	push	eax
	push	ecx
	call	DWORD PTR __imp__SetPixel@16
	pop	ebp
	ret	12					; 0000000cH
?SetPixel@CDC@@QAEKHHK@Z ENDP				; CDC::SetPixel
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??2CObject@@SGPAXI@Z
_TEXT	SEGMENT
_nSize$ = 8						; size = 4
??2CObject@@SGPAXI@Z PROC				; CObject::operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\afx.inl
; Line 106
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _nSize$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	pop	ebp
	ret	4
??2CObject@@SGPAXI@Z ENDP				; CObject::operator new
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?CreateFontA@CFont@@QAEHHHHHHEEEEEEEEPBD@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?CreateFontA@CFont@@QAEHHHHHHEEEEEEEEPBD@Z PROC		; CFont::CreateFontA, COMDAT
; _nWeight$ = eax
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\afxwin1.inl
; Line 168
	push	ebp
	mov	ebp, esp
; Line 171
	push	OFFSET ??_C@_09DGOPBADF@EuroScope?$AA@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	eax
	push	0
	push	0
	push	7
	push	13					; 0000000dH
	call	DWORD PTR __imp__CreateFontA@56
	mov	ecx, DWORD PTR _this$[ebp]
	push	eax
	call	?Attach@CGdiObject@@QAEHPAX@Z		; CGdiObject::Attach
	pop	ebp
	ret	4
?CreateFontA@CFont@@QAEHHHHHHEEEEEEEEPBD@Z ENDP		; CFont::CreateFontA
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Rectangle@CDC@@QAEHHHHH@Z
_TEXT	SEGMENT
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?Rectangle@CDC@@QAEHHHHH@Z PROC				; CDC::Rectangle, COMDAT
; _this$ = ecx
; Line 546
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _y2$[ebp]
	mov	edx, DWORD PTR _x2$[ebp]
	push	eax
	mov	eax, DWORD PTR _y1$[ebp]
	push	edx
	mov	edx, DWORD PTR _x1$[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx+4]
	push	edx
	push	eax
	call	DWORD PTR __imp__Rectangle@20
	pop	ebp
	ret	16					; 00000010H
?Rectangle@CDC@@QAEHHHHH@Z ENDP				; CDC::Rectangle
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
_t$ = 12						; size = 4
_r$ = 16						; size = 4
_b$ = 20						; size = 4
??0CRect@@QAE@HHHH@Z PROC				; CRect::CRect, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atltypes.inl
; Line 265
	push	ebp
	mov	ebp, esp
; Line 267
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, ecx
	mov	ecx, DWORD PTR _l$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 268
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 269
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 270
	pop	ebp
	ret	16					; 00000010H
??0CRect@@QAE@HHHH@Z ENDP				; CRect::CRect
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?MoveTo@CDC@@QAE?AVCPoint@@UtagPOINT@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_point$ = 12						; size = 8
?MoveTo@CDC@@QAE?AVCPoint@@UtagPOINT@@@Z PROC		; CDC::MoveTo, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\afxwin1.inl
; Line 471
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _point$[ebp+4]
	mov	edx, DWORD PTR _point$[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	push	edx
	push	esi
	call	?MoveTo@CDC@@QAE?AVCPoint@@HH@Z		; CDC::MoveTo
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
?MoveTo@CDC@@QAE?AVCPoint@@UtagPOINT@@@Z ENDP		; CDC::MoveTo
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?SelectObject@CDC@@QAEPAXPAX@Z
_TEXT	SEGMENT
_hObject$ = 8						; size = 4
?SelectObject@CDC@@QAEPAXPAX@Z PROC			; CDC::SelectObject, COMDAT
; _this$ = ecx
; Line 372
	push	ebp
	mov	ebp, esp
; Line 373
	mov	eax, DWORD PTR _hObject$[ebp]
	test	eax, eax
	je	SHORT $LN3@SelectObje
	push	eax
	mov	eax, DWORD PTR [ecx+4]
	push	eax
	call	DWORD PTR __imp__SelectObject@8
	pop	ebp
	ret	4
$LN3@SelectObje:
	xor	eax, eax
	pop	ebp
	ret	4
?SelectObject@CDC@@QAEPAXPAX@Z ENDP			; CDC::SelectObject
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@UtagPOINT@@@Z
_TEXT	SEGMENT
_initPt$ = 8						; size = 8
??0CPoint@@QAE@UtagPOINT@@@Z PROC			; CPoint::CPoint, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atltypes.inl
; Line 139
	push	ebp
	mov	ebp, esp
; Line 140
	mov	edx, DWORD PTR _initPt$[ebp+4]
	mov	eax, ecx
	mov	ecx, DWORD PTR _initPt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 141
	pop	ebp
	ret	8
??0CPoint@@QAE@UtagPOINT@@@Z ENDP			; CPoint::CPoint
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?LineTo@CDC@@QAEHUtagPOINT@@@Z
_TEXT	SEGMENT
_point$ = 8						; size = 8
?LineTo@CDC@@QAEHUtagPOINT@@@Z PROC			; CDC::LineTo, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\afxwin1.inl
; Line 473
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _point$[ebp+4]
	mov	edx, DWORD PTR _point$[ebp]
	push	eax
	push	edx
	call	?LineTo@CDC@@QAEHHH@Z			; CDC::LineTo
	pop	ebp
	ret	8
?LineTo@CDC@@QAEHUtagPOINT@@@Z ENDP			; CDC::LineTo
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?FloodCharacters@?$ChTraitsCRT@D@ATL@@SAXDHPAD@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 1
_nLength$ = 12						; size = 4
_pch$ = 16						; size = 4
?FloodCharacters@?$ChTraitsCRT@D@ATL@@SAXDHPAD@Z PROC	; ATL::ChTraitsCRT<char>::FloodCharacters, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\cstringt.h
; Line 411
	push	ebp
	mov	ebp, esp
; Line 413
	mov	eax, DWORD PTR _nLength$[ebp]
	movsx	ecx, BYTE PTR _ch$[ebp]
	mov	edx, DWORD PTR _pch$[ebp]
	push	eax
	push	ecx
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 414
	pop	ebp
	ret	0
?FloodCharacters@?$ChTraitsCRT@D@ATL@@SAXDHPAD@Z ENDP	; ATL::ChTraitsCRT<char>::FloodCharacters
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?OnAsrContentLoaded@euroNatRadarScreen@@UAEX_N@Z
_TEXT	SEGMENT
_Loaded$ = 8						; size = 1
?OnAsrContentLoaded@euroNatRadarScreen@@UAEX_N@Z PROC	; euroNatRadarScreen::OnAsrContentLoaded, COMDAT
; _this$ = ecx
; File c:\users\michael\desktop\code\euronat\euronatradarscreen.cpp
; Line 238
	push	ebp
	mov	ebp, esp
; Line 239
	cmp	BYTE PTR _Loaded$[ebp], 0
	je	SHORT $LN1@OnAsrConte
; Line 240
	push	esi
	mov	esi, DWORD PTR [ecx+8]
	call	?Load@NATShow@@SAXPAVCPlugIn@EuroScopePlugIn@@@Z ; NATShow::Load
	pop	esi
$LN1@OnAsrConte:
; Line 241
	pop	ebp
	ret	4
?OnAsrContentLoaded@euroNatRadarScreen@@UAEX_N@Z ENDP	; euroNatRadarScreen::OnAsrContentLoaded
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?OnOverScreenObject@euroNatRadarScreen@@UAEXHPBDUtagPOINT@@UtagRECT@@@Z
_TEXT	SEGMENT
_ObjectType$ = 8					; size = 4
_sObjectId$ = 12					; size = 4
_Pt$ = 16						; size = 8
_Area$ = 24						; size = 16
?OnOverScreenObject@euroNatRadarScreen@@UAEXHPBDUtagPOINT@@UtagRECT@@@Z PROC ; euroNatRadarScreen::OnOverScreenObject, COMDAT
; _this$ = ecx
; Line 231
	call	DWORD PTR __imp_?RequestRefresh@CRadarScreen@EuroScopePlugIn@@QAEXXZ
; Line 232
	ret	32					; 00000020H
?OnOverScreenObject@euroNatRadarScreen@@UAEXHPBDUtagPOINT@@UtagRECT@@@Z ENDP ; euroNatRadarScreen::OnOverScreenObject
_TEXT	ENDS
PUBLIC	??1euroNatRadarScreen@@UAE@XZ			; euroNatRadarScreen::~euroNatRadarScreen
; Function compile flags: /Ogtp
_TEXT	SEGMENT
??1euroNatRadarScreen@@UAE@XZ PROC			; euroNatRadarScreen::~euroNatRadarScreen
; _this$ = ecx
; Line 46
	push	esi
	mov	esi, ecx
; Line 47
	mov	ecx, DWORD PTR [esi+24]
	mov	DWORD PTR [esi], OFFSET ??_7euroNatRadarScreen@@6B@
	test	ecx, ecx
	je	SHORT $LN3@euroNatRad
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	push	1
	call	edx
$LN3@euroNatRad:
; Line 48
	mov	ecx, DWORD PTR [esi+28]
	pop	esi
	test	ecx, ecx
	je	SHORT $LN5@euroNatRad
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	push	1
	call	edx
$LN5@euroNatRad:
; Line 49
	ret	0
??1euroNatRadarScreen@@UAE@XZ ENDP			; euroNatRadarScreen::~euroNatRadarScreen
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GeuroNatRadarScreen@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GeuroNatRadarScreen@@UAEPAXI@Z PROC			; euroNatRadarScreen::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi+24]
	mov	DWORD PTR [esi], OFFSET ??_7euroNatRadarScreen@@6B@
	test	ecx, ecx
	je	SHORT $LN6@scalar
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	push	1
	call	edx
$LN6@scalar:
	mov	ecx, DWORD PTR [esi+28]
	test	ecx, ecx
	je	SHORT $LN8@scalar
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	push	1
	call	edx
$LN8@scalar:
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN10@scalar
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN10@scalar:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GeuroNatRadarScreen@@UAEPAXI@Z ENDP			; euroNatRadarScreen::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@406fe00000000000
PUBLIC	__real@3fbd2f1a9fbe76c9
PUBLIC	__real@3fd322d0e5604189
PUBLIC	__real@3fe2c8b439581062
PUBLIC	?DrawWuLine@@YAXPAVCDC@@HHHHK@Z			; DrawWuLine
;	COMDAT __real@406fe00000000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\afxwin1.inl
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@3fbd2f1a9fbe76c9
CONST	SEGMENT
__real@3fbd2f1a9fbe76c9 DQ 03fbd2f1a9fbe76c9r	; 0.114
CONST	ENDS
;	COMDAT __real@3fd322d0e5604189
CONST	SEGMENT
__real@3fd322d0e5604189 DQ 03fd322d0e5604189r	; 0.299
CONST	ENDS
;	COMDAT __real@3fe2c8b439581062
CONST	SEGMENT
__real@3fe2c8b439581062 DQ 03fe2c8b439581062r	; 0.587
; Function compile flags: /Ogtp
CONST	ENDS
_TEXT	SEGMENT
tv1338 = -100						; size = 8
tv1331 = -92						; size = 8
tv1699 = -84						; size = 8
_grayl$ = -76						; size = 8
tv1706 = -64						; size = 4
tv1701 = -64						; size = 4
tv1698 = -64						; size = 4
tv1689 = -64						; size = 4
tv1684 = -64						; size = 4
tv1682 = -64						; size = 4
tv1674 = -64						; size = 4
tv1669 = -64						; size = 4
tv1667 = -64						; size = 4
tv1659 = -64						; size = 4
tv1654 = -64						; size = 4
tv1652 = -64						; size = 4
tv1644 = -64						; size = 4
tv1639 = -64						; size = 4
tv1637 = -64						; size = 4
tv1629 = -64						; size = 4
tv1624 = -64						; size = 4
tv1622 = -64						; size = 4
tv1602 = -64						; size = 4
tv1597 = -64						; size = 4
tv1595 = -64						; size = 4
tv1587 = -64						; size = 4
tv1582 = -64						; size = 4
tv1580 = -64						; size = 4
tv1572 = -64						; size = 4
tv1567 = -64						; size = 4
tv1565 = -64						; size = 4
tv1557 = -64						; size = 4
tv1552 = -64						; size = 4
tv1550 = -64						; size = 4
tv1542 = -64						; size = 4
tv1537 = -64						; size = 4
tv1535 = -64						; size = 4
tv1527 = -64						; size = 4
tv1522 = -64						; size = 4
tv1520 = -64						; size = 4
tv1493 = -64						; size = 4
tv1489 = -64						; size = 4
tv1487 = -64						; size = 4
tv1478 = -64						; size = 4
tv1474 = -64						; size = 4
tv1472 = -64						; size = 4
tv1458 = -64						; size = 4
tv1456 = -64						; size = 4
tv1447 = -64						; size = 4
tv1443 = -64						; size = 4
tv1441 = -64						; size = 4
tv1432 = -64						; size = 4
tv1428 = -64						; size = 4
tv1426 = -64						; size = 4
tv1417 = -64						; size = 4
tv1413 = -64						; size = 4
tv1411 = -64						; size = 4
tv1390 = -64						; size = 4
tv1386 = -64						; size = 4
tv1384 = -64						; size = 4
tv1375 = -64						; size = 4
tv1371 = -64						; size = 4
tv1369 = -64						; size = 4
tv1359 = -64						; size = 4
tv1353 = -64						; size = 4
tv1343 = -64						; size = 4
tv1339 = -64						; size = 4
tv1335 = -64						; size = 4
tv1326 = -64						; size = 4
tv1320 = -64						; size = 4
tv1318 = -64						; size = 4
tv1296 = -64						; size = 4
tv1292 = -64						; size = 4
tv1288 = -64						; size = 4
tv1277 = -64						; size = 4
tv899 = -64						; size = 4
_ErrorAdj$ = -60					; size = 2
_ErrorAcc$ = -56					; size = 2
_XDir$ = -52						; size = 4
tv1462 = -48						; size = 4
tv822 = -48						; size = 4
tv804 = -48						; size = 4
tv665 = -48						; size = 4
tv647 = -48						; size = 4
_DeltaY$ = -48						; size = 4
tv1759 = -44						; size = 4
tv1708 = -44						; size = 4
tv1469 = -44						; size = 4
tv1357 = -44						; size = 4
tv1337 = -40						; size = 4
tv1330 = -36						; size = 4
tv1697 = -32						; size = 4
tv1350 = -28						; size = 4
tv455 = -28						; size = 4
tv437 = -28						; size = 4
tv298 = -28						; size = 4
tv280 = -28						; size = 4
_DeltaX$ = -28						; size = 4
tv1363 = -24						; size = 4
tv782 = -24						; size = 4
tv764 = -24						; size = 4
tv724 = -24						; size = 4
_Weighting$ = -24					; size = 2
tv415 = -24						; size = 4
tv397 = -24						; size = 4
tv357 = -24						; size = 4
tv625 = -20						; size = 4
tv607 = -20						; size = 4
tv1642 = -18						; size = 2
tv1627 = -18						; size = 2
tv1540 = -18						; size = 2
tv1525 = -18						; size = 2
tv1460 = -18						; size = 2
tv1446 = -18						; size = 2
tv1431 = -18						; size = 2
tv1416 = -18						; size = 2
tv1356 = -18						; size = 2
tv1342 = -18						; size = 2
tv1324 = -18						; size = 2
tv1295 = -18						; size = 2
_gb$232856 = -17					; size = 1
_bb$232794 = -17					; size = 1
tv258 = -16						; size = 4
tv240 = -16						; size = 4
tv1672 = -14						; size = 2
tv1657 = -14						; size = 2
tv1570 = -14						; size = 2
tv1555 = -14						; size = 2
_bb$232860 = -13					; size = 1
_gb$232790 = -13					; size = 1
_bl$ = -10						; size = 1
_gl$ = -9						; size = 1
tv742 = -8						; size = 4
tv585 = -8						; size = 4
tv567 = -8						; size = 4
tv375 = -8						; size = 4
tv218 = -8						; size = 4
tv200 = -8						; size = 4
tv1704 = -6						; size = 2
tv1687 = -6						; size = 2
tv1600 = -6						; size = 2
tv1585 = -6						; size = 2
tv1492 = -6						; size = 2
tv1477 = -6						; size = 2
tv1389 = -6						; size = 2
tv1374 = -6						; size = 2
_rr$232864 = -5						; size = 1
_rr$232798 = -5						; size = 1
_X1$ = 8						; size = 4
_Y1$ = 12						; size = 4
_clrLine$ = 16						; size = 4
?DrawWuLine@@YAXPAVCDC@@HHHHK@Z PROC			; DrawWuLine
; _pDC$ = ebx
; _X0$ = edx
; _Y0$ = eax
; File c:\users\michael\desktop\code\euronat\wuline.h
; Line 4
	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR _Y1$[ebp]
	sub	esp, 100				; 00000064H
	push	esi
	push	edi
	mov	edi, eax
	mov	esi, edx
; Line 6
	cmp	edi, ecx
	jle	SHORT $LN21@DrawWuLine
; Line 9
	mov	eax, esi
	mov	esi, DWORD PTR _X1$[ebp]
	mov	DWORD PTR _Y1$[ebp], edi
	mov	edi, ecx
	mov	DWORD PTR _X1$[ebp], eax
$LN21@DrawWuLine:
; Line 14
	mov	eax, DWORD PTR _clrLine$[ebp]
	mov	ecx, DWORD PTR [ebx+4]
	push	eax
	push	edi
	push	esi
	push	ecx
	call	DWORD PTR __imp__SetPixel@16
; Line 16
	mov	eax, DWORD PTR _X1$[ebp]
	sub	eax, esi
	mov	DWORD PTR _DeltaX$[ebp], eax
; Line 17
	js	SHORT $LN20@DrawWuLine
; Line 19
	mov	DWORD PTR _XDir$[ebp], 1
; Line 21
	jmp	SHORT $LN19@DrawWuLine
$LN20@DrawWuLine:
; Line 24
	mov	edx, DWORD PTR _DeltaX$[ebp]
	neg	edx
	mov	DWORD PTR _XDir$[ebp], -1
	mov	DWORD PTR _DeltaX$[ebp], edx
$LN19@DrawWuLine:
; Line 30
	mov	ecx, DWORD PTR _Y1$[ebp]
	sub	ecx, edi
	mov	DWORD PTR _DeltaY$[ebp], ecx
; Line 31
	jne	SHORT $LN18@DrawWuLine
; Line 34
	cmp	DWORD PTR _DeltaX$[ebp], 0
	je	$LN114@DrawWuLine
$LL17@DrawWuLine:
; Line 37
	mov	eax, DWORD PTR _clrLine$[ebp]
	add	esi, DWORD PTR _XDir$[ebp]
	mov	ecx, DWORD PTR [ebx+4]
	dec	DWORD PTR _DeltaX$[ebp]
	push	eax
	push	edi
	push	esi
	push	ecx
	call	DWORD PTR __imp__SetPixel@16
	cmp	DWORD PTR _DeltaX$[ebp], 0
	jne	SHORT $LL17@DrawWuLine
; Line 209
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@DrawWuLine:
; Line 41
	mov	eax, DWORD PTR _DeltaX$[ebp]
	test	eax, eax
	jne	SHORT $LN15@DrawWuLine
	npad	1
$LL14@DrawWuLine:
; Line 47
	mov	edx, DWORD PTR _clrLine$[ebp]
	mov	eax, DWORD PTR [ebx+4]
	push	edx
	inc	edi
	push	edi
	push	esi
	push	eax
	call	DWORD PTR __imp__SetPixel@16
; Line 48
	dec	DWORD PTR _DeltaY$[ebp]
	jne	SHORT $LL14@DrawWuLine
; Line 209
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@DrawWuLine:
; Line 52
	cmp	eax, ecx
	jne	SHORT $LN11@DrawWuLine
$LL10@DrawWuLine:
; Line 59
	mov	ecx, DWORD PTR _clrLine$[ebp]
	add	esi, DWORD PTR _XDir$[ebp]
	mov	edx, DWORD PTR [ebx+4]
	push	ecx
	inc	edi
	push	edi
	push	esi
	push	edx
	call	DWORD PTR __imp__SetPixel@16
; Line 60
	dec	DWORD PTR _DeltaY$[ebp]
	jne	SHORT $LL10@DrawWuLine
; Line 209
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@DrawWuLine:
; Line 71
	mov	eax, DWORD PTR _clrLine$[ebp]
	mov	edx, eax
	shr	edx, 8
	mov	BYTE PTR _gl$[ebp], dl
; Line 72
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	BYTE PTR _bl$[ebp], dl
; Line 73
	movzx	edx, BYTE PTR _gl$[ebp]
	mov	DWORD PTR tv1330[ebp], edx
	movzx	edx, BYTE PTR _bl$[ebp]
	fild	DWORD PTR tv1330[ebp]
	movzx	eax, al
	fst	QWORD PTR tv1331[ebp]
	mov	DWORD PTR tv1697[ebp], eax
; Line 76
	mov	eax, DWORD PTR _DeltaX$[ebp]
	mov	DWORD PTR tv1337[ebp], edx
	fild	DWORD PTR tv1697[ebp]
; Line 81
	xor	edx, edx
	mov	DWORD PTR _ErrorAcc$[ebp], 0
	fst	QWORD PTR tv1699[ebp]
	fild	DWORD PTR tv1337[ebp]
	fst	QWORD PTR tv1338[ebp]
	fxch	ST(2)
	fmul	QWORD PTR __real@3fe2c8b439581062
	fxch	ST(1)
	fmul	QWORD PTR __real@3fd322d0e5604189
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR __real@3fbd2f1a9fbe76c9
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _grayl$[ebp]
	cmp	ecx, eax
	jle	$LN7@DrawWuLine
	shl	eax, 16					; 00000010H
	div	ecx
; Line 83
	dec	ecx
	mov	DWORD PTR _DeltaY$[ebp], ecx
	movzx	eax, ax
	mov	DWORD PTR _ErrorAdj$[ebp], eax
	je	$LN5@DrawWuLine
$LL6@DrawWuLine:
; Line 84
	mov	eax, DWORD PTR _ErrorAcc$[ebp]
	movzx	ecx, ax
; Line 85
	add	eax, DWORD PTR _ErrorAdj$[ebp]
	mov	DWORD PTR _ErrorAcc$[ebp], eax
; Line 86
	cmp	ax, cx
	ja	SHORT $LN4@DrawWuLine
; Line 88
	add	esi, DWORD PTR _XDir$[ebp]
$LN4@DrawWuLine:
; Line 94
	mov	cx, WORD PTR _ErrorAcc$[ebp]
; Line 98
	mov	eax, DWORD PTR [ebx+4]
	inc	edi
	shr	cx, 8
	push	edi
	movzx	edx, cx
	push	esi
	push	eax
	mov	DWORD PTR _Weighting$[ebp], edx
	call	DWORD PTR __imp__GetPixel@12
; Line 100
	mov	ecx, eax
	shr	ecx, 8
	mov	BYTE PTR _gb$232790[ebp], cl
; Line 102
	movzx	ecx, cl
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	DWORD PTR tv1350[ebp], ecx
	movzx	ecx, al
	fild	DWORD PTR tv1350[ebp]
	mov	BYTE PTR _bb$232794[ebp], dl
	mov	DWORD PTR tv1708[ebp], ecx
	movzx	edx, dl
	fild	DWORD PTR tv1708[ebp]
	mov	DWORD PTR tv1357[ebp], edx
	fild	DWORD PTR tv1357[ebp]
	fld	ST(2)
	fmul	QWORD PTR __real@3fe2c8b439581062
	fld	ST(2)
	fmul	QWORD PTR __real@3fd322d0e5604189
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR __real@3fbd2f1a9fbe76c9
	faddp	ST(1), ST(0)
; Line 107
	cmp	al, BYTE PTR _clrLine$[ebp]
	jbe	SHORT $LN28@DrawWuLine
	movzx	edx, WORD PTR _Weighting$[ebp]
	fstp	ST(2)
	fld	QWORD PTR _grayl$[ebp]
	mov	DWORD PTR tv1363[ebp], edx
	fcom	ST(2)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN24@DrawWuLine
	mov	DWORD PTR tv200[ebp], edx
	jmp	SHORT $LN25@DrawWuLine
$LN24@DrawWuLine:
	mov	eax, edx
	xor	eax, 255				; 000000ffH
	mov	DWORD PTR tv200[ebp], eax
$LN25@DrawWuLine:
	sub	ecx, DWORD PTR tv1697[ebp]
	mov	DWORD PTR tv1706[ebp], ecx
	fild	DWORD PTR tv1706[ebp]
	fild	DWORD PTR tv200[ebp]
	fld	QWORD PTR __real@406fe00000000000
	fnstcw	WORD PTR tv1704[ebp]
	fdiv	ST(1), ST(0)
	movzx	eax, WORD PTR tv1704[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1701[ebp], eax
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR tv1699[ebp]
	fldcw	WORD PTR tv1701[ebp]
	fistp	DWORD PTR tv1698[ebp]
	mov	cl, BYTE PTR tv1698[ebp]
	fldcw	WORD PTR tv1704[ebp]
	mov	BYTE PTR _rr$232798[ebp], cl
	jmp	SHORT $LN29@DrawWuLine
$LN28@DrawWuLine:
	fld	QWORD PTR _grayl$[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	movzx	eax, WORD PTR _Weighting$[ebp]
	mov	DWORD PTR tv1363[ebp], eax
	jnp	SHORT $LN273@DrawWuLine
	xor	eax, 255				; 000000ffH
$LN273@DrawWuLine:
	mov	edx, DWORD PTR tv1697[ebp]
	sub	edx, ecx
	mov	DWORD PTR tv218[ebp], eax
	mov	DWORD PTR tv1689[ebp], edx
	fild	DWORD PTR tv1689[ebp]
	mov	edx, DWORD PTR tv1363[ebp]
	fild	DWORD PTR tv218[ebp]
	fld	QWORD PTR __real@406fe00000000000
	fnstcw	WORD PTR tv1687[ebp]
	fdiv	ST(1), ST(0)
	movzx	eax, WORD PTR tv1687[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1684[ebp], eax
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	faddp	ST(5), ST(0)
	fldcw	WORD PTR tv1684[ebp]
	fxch	ST(4)
	fistp	DWORD PTR tv1682[ebp]
	mov	al, BYTE PTR tv1682[ebp]
	fldcw	WORD PTR tv1687[ebp]
	mov	BYTE PTR _rr$232798[ebp], al
	fxch	ST(1)
	fxch	ST(3)
$LN29@DrawWuLine:
; Line 111
	mov	cl, BYTE PTR _gb$232790[ebp]
	cmp	cl, BYTE PTR _gl$[ebp]
	jbe	SHORT $LN34@DrawWuLine
	fstp	ST(4)
	fcom	ST(2)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN30@DrawWuLine
	mov	DWORD PTR tv240[ebp], edx
	jmp	SHORT $LN31@DrawWuLine
$LN30@DrawWuLine:
	mov	eax, edx
	xor	eax, 255				; 000000ffH
	mov	DWORD PTR tv240[ebp], eax
$LN31@DrawWuLine:
	mov	eax, DWORD PTR tv1350[ebp]
	sub	eax, DWORD PTR tv1330[ebp]
	mov	DWORD PTR tv1674[ebp], eax
	fild	DWORD PTR tv1674[ebp]
	fild	DWORD PTR tv240[ebp]
	fnstcw	WORD PTR tv1672[ebp]
	fdiv	ST(0), ST(5)
	movzx	eax, WORD PTR tv1672[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1669[ebp], eax
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR tv1331[ebp]
	fldcw	WORD PTR tv1669[ebp]
	fistp	DWORD PTR tv1667[ebp]
	mov	cl, BYTE PTR tv1667[ebp]
	fldcw	WORD PTR tv1672[ebp]
	jmp	SHORT $LN35@DrawWuLine
$LN34@DrawWuLine:
	fxch	ST(1)
	fcom	ST(3)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN32@DrawWuLine
	mov	DWORD PTR tv258[ebp], edx
	jmp	SHORT $LN33@DrawWuLine
$LN32@DrawWuLine:
	mov	ecx, edx
	xor	ecx, 255				; 000000ffH
	mov	DWORD PTR tv258[ebp], ecx
$LN33@DrawWuLine:
	mov	eax, DWORD PTR tv1330[ebp]
	sub	eax, DWORD PTR tv1350[ebp]
	mov	DWORD PTR tv1659[ebp], eax
	fild	DWORD PTR tv1659[ebp]
	fild	DWORD PTR tv258[ebp]
	fnstcw	WORD PTR tv1657[ebp]
	fdiv	ST(0), ST(3)
	movzx	eax, WORD PTR tv1657[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1654[ebp], eax
	fmulp	ST(1), ST(0)
	faddp	ST(5), ST(0)
	fldcw	WORD PTR tv1654[ebp]
	fxch	ST(4)
	fistp	DWORD PTR tv1652[ebp]
	mov	cl, BYTE PTR tv1652[ebp]
	fldcw	WORD PTR tv1657[ebp]
	fxch	ST(3)
$LN35@DrawWuLine:
; Line 115
	mov	al, BYTE PTR _bb$232794[ebp]
	cmp	al, BYTE PTR _bl$[ebp]
	jbe	SHORT $LN40@DrawWuLine
	fstp	ST(1)
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN274@DrawWuLine
	xor	edx, 255				; 000000ffH
$LN274@DrawWuLine:
	mov	eax, DWORD PTR tv1357[ebp]
	fnstcw	WORD PTR tv1642[ebp]
	sub	eax, DWORD PTR tv1337[ebp]
	mov	DWORD PTR tv280[ebp], edx
	mov	DWORD PTR tv1644[ebp], eax
	fild	DWORD PTR tv1644[ebp]
	movzx	eax, WORD PTR tv1642[ebp]
	fild	DWORD PTR tv280[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1639[ebp], eax
	fdivrp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR tv1338[ebp]
	fldcw	WORD PTR tv1639[ebp]
	fistp	DWORD PTR tv1637[ebp]
	mov	al, BYTE PTR tv1637[ebp]
	fldcw	WORD PTR tv1642[ebp]
	jmp	SHORT $LN41@DrawWuLine
$LN40@DrawWuLine:
	fcomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5
	jnp	SHORT $LN275@DrawWuLine
	xor	edx, 255				; 000000ffH
$LN275@DrawWuLine:
	mov	DWORD PTR tv298[ebp], edx
	fnstcw	WORD PTR tv1627[ebp]
	mov	edx, DWORD PTR tv1337[ebp]
	sub	edx, DWORD PTR tv1357[ebp]
	movzx	eax, WORD PTR tv1627[ebp]
	mov	DWORD PTR tv1629[ebp], edx
	or	eax, 3072				; 00000c00H
	fild	DWORD PTR tv1629[ebp]
	mov	DWORD PTR tv1624[ebp], eax
	fild	DWORD PTR tv298[ebp]
	fdivrp	ST(3), ST(0)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fldcw	WORD PTR tv1624[ebp]
	fistp	DWORD PTR tv1622[ebp]
	mov	al, BYTE PTR tv1622[ebp]
	fldcw	WORD PTR tv1627[ebp]
$LN41@DrawWuLine:
; Line 116
	movzx	edx, BYTE PTR _rr$232798[ebp]
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, cl
	or	eax, ecx
	shl	eax, 8
	or	eax, edx
	push	eax
	mov	eax, DWORD PTR [ebx+4]
	push	edi
	push	esi
	push	eax
	call	DWORD PTR __imp__SetPixel@16
; Line 118
	mov	eax, DWORD PTR _XDir$[ebp]
	mov	edx, DWORD PTR [ebx+4]
	push	edi
	add	eax, esi
	push	eax
	push	edx
	call	DWORD PTR __imp__GetPixel@12
; Line 120
	mov	ecx, eax
	shr	ecx, 8
	mov	BYTE PTR _gb$232790[ebp], cl
; Line 122
	movzx	ecx, cl
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	DWORD PTR tv1350[ebp], ecx
	movzx	ecx, al
	fild	DWORD PTR tv1350[ebp]
	mov	BYTE PTR _bb$232794[ebp], dl
	mov	DWORD PTR tv1708[ebp], ecx
	movzx	edx, dl
	fild	DWORD PTR tv1708[ebp]
	mov	DWORD PTR tv1357[ebp], edx
	fild	DWORD PTR tv1357[ebp]
	fld	ST(2)
	fmul	QWORD PTR __real@3fe2c8b439581062
	fld	ST(2)
	fmul	QWORD PTR __real@3fd322d0e5604189
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR __real@3fbd2f1a9fbe76c9
	faddp	ST(1), ST(0)
; Line 127
	cmp	al, BYTE PTR _clrLine$[ebp]
	jbe	SHORT $LN46@DrawWuLine
	mov	edx, DWORD PTR tv1363[ebp]
	fstp	ST(2)
	fld	QWORD PTR _grayl$[ebp]
	fcom	ST(2)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN42@DrawWuLine
	mov	eax, edx
	xor	eax, 255				; 000000ffH
	mov	DWORD PTR tv357[ebp], eax
	jmp	SHORT $LN43@DrawWuLine
$LN42@DrawWuLine:
	mov	DWORD PTR tv357[ebp], edx
$LN43@DrawWuLine:
	sub	ecx, DWORD PTR tv1697[ebp]
	fnstcw	WORD PTR tv1600[ebp]
	movzx	eax, WORD PTR tv1600[ebp]
	mov	DWORD PTR tv1602[ebp], ecx
	or	eax, 3072				; 00000c00H
	fild	DWORD PTR tv1602[ebp]
	mov	DWORD PTR tv1597[ebp], eax
	fild	DWORD PTR tv357[ebp]
	fld	QWORD PTR __real@406fe00000000000
	fdiv	ST(1), ST(0)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR tv1699[ebp]
	fldcw	WORD PTR tv1597[ebp]
	fistp	DWORD PTR tv1595[ebp]
	mov	cl, BYTE PTR tv1595[ebp]
	fldcw	WORD PTR tv1600[ebp]
	mov	BYTE PTR _rr$232798[ebp], cl
	jmp	SHORT $LN47@DrawWuLine
$LN46@DrawWuLine:
	fld	QWORD PTR _grayl$[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN44@DrawWuLine
	mov	edx, DWORD PTR tv1363[ebp]
	xor	edx, 255				; 000000ffH
	mov	DWORD PTR tv375[ebp], edx
	jmp	SHORT $LN45@DrawWuLine
$LN44@DrawWuLine:
	mov	eax, DWORD PTR tv1363[ebp]
	mov	DWORD PTR tv375[ebp], eax
$LN45@DrawWuLine:
	mov	edx, DWORD PTR tv1697[ebp]
	sub	edx, ecx
	mov	DWORD PTR tv1587[ebp], edx
	fild	DWORD PTR tv1587[ebp]
	mov	edx, DWORD PTR tv1363[ebp]
	fild	DWORD PTR tv375[ebp]
	fld	QWORD PTR __real@406fe00000000000
	fnstcw	WORD PTR tv1585[ebp]
	fdiv	ST(1), ST(0)
	movzx	eax, WORD PTR tv1585[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1582[ebp], eax
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	faddp	ST(5), ST(0)
	fldcw	WORD PTR tv1582[ebp]
	fxch	ST(4)
	fistp	DWORD PTR tv1580[ebp]
	mov	al, BYTE PTR tv1580[ebp]
	fldcw	WORD PTR tv1585[ebp]
	mov	BYTE PTR _rr$232798[ebp], al
	fxch	ST(1)
	fxch	ST(3)
$LN47@DrawWuLine:
; Line 131
	mov	cl, BYTE PTR _gb$232790[ebp]
	cmp	cl, BYTE PTR _gl$[ebp]
	jbe	SHORT $LN52@DrawWuLine
	fstp	ST(4)
	fcom	ST(2)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN48@DrawWuLine
	mov	eax, edx
	xor	eax, 255				; 000000ffH
	mov	DWORD PTR tv397[ebp], eax
	jmp	SHORT $LN49@DrawWuLine
$LN48@DrawWuLine:
	mov	DWORD PTR tv397[ebp], edx
$LN49@DrawWuLine:
	mov	eax, DWORD PTR tv1350[ebp]
	fnstcw	WORD PTR tv1570[ebp]
	sub	eax, DWORD PTR tv1330[ebp]
	mov	DWORD PTR tv1572[ebp], eax
	fild	DWORD PTR tv1572[ebp]
	movzx	eax, WORD PTR tv1570[ebp]
	fild	DWORD PTR tv397[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1567[ebp], eax
	fdiv	ST(0), ST(5)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR tv1331[ebp]
	fldcw	WORD PTR tv1567[ebp]
	fistp	DWORD PTR tv1565[ebp]
	mov	cl, BYTE PTR tv1565[ebp]
	fldcw	WORD PTR tv1570[ebp]
	jmp	SHORT $LN53@DrawWuLine
$LN52@DrawWuLine:
	fxch	ST(1)
	fcom	ST(3)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN50@DrawWuLine
	mov	ecx, edx
	xor	ecx, 255				; 000000ffH
	mov	DWORD PTR tv415[ebp], ecx
	jmp	SHORT $LN51@DrawWuLine
$LN50@DrawWuLine:
	mov	DWORD PTR tv415[ebp], edx
$LN51@DrawWuLine:
	mov	eax, DWORD PTR tv1330[ebp]
	fnstcw	WORD PTR tv1555[ebp]
	sub	eax, DWORD PTR tv1350[ebp]
	mov	DWORD PTR tv1557[ebp], eax
	fild	DWORD PTR tv1557[ebp]
	movzx	eax, WORD PTR tv1555[ebp]
	fild	DWORD PTR tv415[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1552[ebp], eax
	fdiv	ST(0), ST(3)
	fmulp	ST(1), ST(0)
	faddp	ST(5), ST(0)
	fldcw	WORD PTR tv1552[ebp]
	fxch	ST(4)
	fistp	DWORD PTR tv1550[ebp]
	mov	cl, BYTE PTR tv1550[ebp]
	fldcw	WORD PTR tv1555[ebp]
	fxch	ST(3)
$LN53@DrawWuLine:
; Line 135
	mov	al, BYTE PTR _bb$232794[ebp]
	cmp	al, BYTE PTR _bl$[ebp]
	jbe	SHORT $LN58@DrawWuLine
	fstp	ST(1)
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN54@DrawWuLine
	xor	edx, 255				; 000000ffH
$LN54@DrawWuLine:
	mov	eax, DWORD PTR tv1357[ebp]
	fnstcw	WORD PTR tv1540[ebp]
	sub	eax, DWORD PTR tv1337[ebp]
	mov	DWORD PTR tv437[ebp], edx
	mov	DWORD PTR tv1542[ebp], eax
	fild	DWORD PTR tv1542[ebp]
	movzx	eax, WORD PTR tv1540[ebp]
	fild	DWORD PTR tv437[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1537[ebp], eax
	fdivrp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR tv1338[ebp]
	fldcw	WORD PTR tv1537[ebp]
	fistp	DWORD PTR tv1535[ebp]
	mov	al, BYTE PTR tv1535[ebp]
	fldcw	WORD PTR tv1540[ebp]
	jmp	SHORT $LN59@DrawWuLine
$LN58@DrawWuLine:
	fcomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5
	jp	SHORT $LN56@DrawWuLine
	xor	edx, 255				; 000000ffH
$LN56@DrawWuLine:
	mov	DWORD PTR tv455[ebp], edx
	fnstcw	WORD PTR tv1525[ebp]
	mov	edx, DWORD PTR tv1337[ebp]
	sub	edx, DWORD PTR tv1357[ebp]
	movzx	eax, WORD PTR tv1525[ebp]
	mov	DWORD PTR tv1527[ebp], edx
	or	eax, 3072				; 00000c00H
	fild	DWORD PTR tv1527[ebp]
	mov	DWORD PTR tv1522[ebp], eax
	fild	DWORD PTR tv455[ebp]
	fdivrp	ST(3), ST(0)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fldcw	WORD PTR tv1522[ebp]
	fistp	DWORD PTR tv1520[ebp]
	mov	al, BYTE PTR tv1520[ebp]
	fldcw	WORD PTR tv1525[ebp]
$LN59@DrawWuLine:
; Line 136
	movzx	edx, BYTE PTR _rr$232798[ebp]
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, cl
	or	eax, ecx
	mov	ecx, DWORD PTR [ebx+4]
	shl	eax, 8
	or	eax, edx
	push	eax
	mov	eax, DWORD PTR _XDir$[ebp]
	push	edi
	add	eax, esi
	push	eax
	push	ecx
	call	DWORD PTR __imp__SetPixel@16
	dec	DWORD PTR _DeltaY$[ebp]
	jne	$LL6@DrawWuLine
$LN5@DrawWuLine:
; Line 140
	mov	edx, DWORD PTR _clrLine$[ebp]
	mov	eax, DWORD PTR _Y1$[ebp]
	mov	ecx, DWORD PTR _X1$[ebp]
	push	edx
	mov	edx, DWORD PTR [ebx+4]
	push	eax
	push	ecx
	push	edx
; Line 208
	call	DWORD PTR __imp__SetPixel@16
; Line 209
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@DrawWuLine:
; Line 146
	mov	eax, ecx
	mov	ecx, DWORD PTR _DeltaX$[ebp]
	shl	eax, 16					; 00000010H
	div	ecx
; Line 148
	dec	ecx
	mov	DWORD PTR _DeltaX$[ebp], ecx
	movzx	eax, ax
	mov	DWORD PTR _ErrorAdj$[ebp], eax
	je	$LN2@DrawWuLine
$LL3@DrawWuLine:
; Line 149
	mov	eax, DWORD PTR _ErrorAcc$[ebp]
	movzx	ecx, ax
; Line 150
	add	eax, DWORD PTR _ErrorAdj$[ebp]
	mov	DWORD PTR _ErrorAcc$[ebp], eax
; Line 151
	cmp	ax, cx
	ja	SHORT $LN1@DrawWuLine
; Line 153
	inc	edi
$LN1@DrawWuLine:
; Line 159
	mov	cx, WORD PTR _ErrorAcc$[ebp]
	add	esi, DWORD PTR _XDir$[ebp]
; Line 163
	mov	eax, DWORD PTR [ebx+4]
	shr	cx, 8
	push	edi
	movzx	edx, cx
	push	esi
	push	eax
	mov	DWORD PTR _Weighting$[ebp], edx
	call	DWORD PTR __imp__GetPixel@12
; Line 165
	mov	ecx, eax
	shr	ecx, 8
	mov	BYTE PTR _gb$232856[ebp], cl
; Line 167
	movzx	ecx, cl
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	DWORD PTR tv1462[ebp], ecx
	movzx	ecx, al
	fild	DWORD PTR tv1462[ebp]
	mov	BYTE PTR _bb$232860[ebp], dl
	mov	DWORD PTR tv1759[ebp], ecx
	movzx	edx, dl
	fild	DWORD PTR tv1759[ebp]
	mov	DWORD PTR tv1469[ebp], edx
	fild	DWORD PTR tv1469[ebp]
	fld	ST(1)
	fmul	QWORD PTR __real@3fd322d0e5604189
	fld	ST(3)
	fmul	QWORD PTR __real@3fe2c8b439581062
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR __real@3fbd2f1a9fbe76c9
	faddp	ST(1), ST(0)
; Line 172
	cmp	al, BYTE PTR _clrLine$[ebp]
	jbe	SHORT $LN64@DrawWuLine
	movzx	edx, WORD PTR _Weighting$[ebp]
	fstp	ST(2)
	fld	QWORD PTR _grayl$[ebp]
	mov	DWORD PTR tv1363[ebp], edx
	fcom	ST(2)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN60@DrawWuLine
	mov	DWORD PTR tv567[ebp], edx
	jmp	SHORT $LN61@DrawWuLine
$LN60@DrawWuLine:
	mov	eax, edx
	xor	eax, 255				; 000000ffH
	mov	DWORD PTR tv567[ebp], eax
$LN61@DrawWuLine:
	fild	DWORD PTR tv567[ebp]
	sub	ecx, DWORD PTR tv1697[ebp]
	fld	QWORD PTR __real@406fe00000000000
	mov	DWORD PTR tv1493[ebp], ecx
	fnstcw	WORD PTR tv1492[ebp]
	fdiv	ST(1), ST(0)
	movzx	eax, WORD PTR tv1492[ebp]
	or	eax, 3072				; 00000c00H
	fild	DWORD PTR tv1493[ebp]
	mov	DWORD PTR tv1489[ebp], eax
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR tv1699[ebp]
	fldcw	WORD PTR tv1489[ebp]
	fistp	DWORD PTR tv1487[ebp]
	mov	cl, BYTE PTR tv1487[ebp]
	fldcw	WORD PTR tv1492[ebp]
	mov	BYTE PTR _rr$232864[ebp], cl
	jmp	SHORT $LN65@DrawWuLine
$LN64@DrawWuLine:
	fld	QWORD PTR _grayl$[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	movzx	eax, WORD PTR _Weighting$[ebp]
	mov	DWORD PTR tv1363[ebp], eax
	jnp	SHORT $LN277@DrawWuLine
	xor	eax, 255				; 000000ffH
$LN277@DrawWuLine:
	mov	DWORD PTR tv585[ebp], eax
	fild	DWORD PTR tv585[ebp]
	mov	edx, DWORD PTR tv1697[ebp]
	fld	QWORD PTR __real@406fe00000000000
	sub	edx, ecx
	mov	DWORD PTR tv1478[ebp], edx
	fnstcw	WORD PTR tv1477[ebp]
	fdiv	ST(1), ST(0)
	movzx	eax, WORD PTR tv1477[ebp]
	mov	edx, DWORD PTR tv1363[ebp]
	or	eax, 3072				; 00000c00H
	fild	DWORD PTR tv1478[ebp]
	mov	DWORD PTR tv1474[ebp], eax
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	faddp	ST(5), ST(0)
	fldcw	WORD PTR tv1474[ebp]
	fxch	ST(4)
	fistp	DWORD PTR tv1472[ebp]
	mov	al, BYTE PTR tv1472[ebp]
	fldcw	WORD PTR tv1477[ebp]
	mov	BYTE PTR _rr$232864[ebp], al
	fxch	ST(1)
	fxch	ST(3)
$LN65@DrawWuLine:
; Line 176
	mov	cl, BYTE PTR _gb$232856[ebp]
	cmp	cl, BYTE PTR _gl$[ebp]
	jbe	SHORT $LN70@DrawWuLine
	fstp	ST(4)
	fcom	ST(2)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN66@DrawWuLine
	mov	DWORD PTR tv607[ebp], edx
	jmp	SHORT $LN67@DrawWuLine
$LN66@DrawWuLine:
	mov	eax, edx
	xor	eax, 255				; 000000ffH
	mov	DWORD PTR tv607[ebp], eax
$LN67@DrawWuLine:
	fild	DWORD PTR tv607[ebp]
	mov	eax, DWORD PTR tv1462[ebp]
	sub	eax, DWORD PTR tv1330[ebp]
	fnstcw	WORD PTR tv1460[ebp]
	fdiv	ST(0), ST(4)
	mov	DWORD PTR tv1277[ebp], eax
	movzx	eax, WORD PTR tv1460[ebp]
	or	eax, 3072				; 00000c00H
	fild	DWORD PTR tv1277[ebp]
	mov	DWORD PTR tv1458[ebp], eax
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR tv1331[ebp]
	fldcw	WORD PTR tv1458[ebp]
	fistp	DWORD PTR tv1456[ebp]
	mov	cl, BYTE PTR tv1456[ebp]
	fldcw	WORD PTR tv1460[ebp]
	jmp	SHORT $LN71@DrawWuLine
$LN70@DrawWuLine:
	fxch	ST(1)
	fcom	ST(3)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN68@DrawWuLine
	mov	DWORD PTR tv625[ebp], edx
	jmp	SHORT $LN69@DrawWuLine
$LN68@DrawWuLine:
	mov	ecx, edx
	xor	ecx, 255				; 000000ffH
	mov	DWORD PTR tv625[ebp], ecx
$LN69@DrawWuLine:
	fild	DWORD PTR tv625[ebp]
	mov	eax, DWORD PTR tv1330[ebp]
	sub	eax, DWORD PTR tv1462[ebp]
	fnstcw	WORD PTR tv1446[ebp]
	fdiv	ST(0), ST(2)
	mov	DWORD PTR tv1447[ebp], eax
	movzx	eax, WORD PTR tv1446[ebp]
	or	eax, 3072				; 00000c00H
	fild	DWORD PTR tv1447[ebp]
	mov	DWORD PTR tv1443[ebp], eax
	fmulp	ST(1), ST(0)
	faddp	ST(5), ST(0)
	fldcw	WORD PTR tv1443[ebp]
	fxch	ST(4)
	fistp	DWORD PTR tv1441[ebp]
	mov	cl, BYTE PTR tv1441[ebp]
	fldcw	WORD PTR tv1446[ebp]
	fxch	ST(3)
$LN71@DrawWuLine:
; Line 180
	mov	al, BYTE PTR _bb$232860[ebp]
	cmp	al, BYTE PTR _bl$[ebp]
	jbe	SHORT $LN76@DrawWuLine
	fstp	ST(1)
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN278@DrawWuLine
	xor	edx, 255				; 000000ffH
$LN278@DrawWuLine:
	mov	eax, DWORD PTR tv1469[ebp]
	fnstcw	WORD PTR tv1431[ebp]
	sub	eax, DWORD PTR tv1337[ebp]
	mov	DWORD PTR tv647[ebp], edx
	fidivr	DWORD PTR tv647[ebp]
	mov	DWORD PTR tv1432[ebp], eax
	movzx	eax, WORD PTR tv1431[ebp]
	or	eax, 3072				; 00000c00H
	fild	DWORD PTR tv1432[ebp]
	mov	DWORD PTR tv1428[ebp], eax
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR tv1338[ebp]
	fldcw	WORD PTR tv1428[ebp]
	fistp	DWORD PTR tv1426[ebp]
	mov	al, BYTE PTR tv1426[ebp]
	fldcw	WORD PTR tv1431[ebp]
	jmp	SHORT $LN77@DrawWuLine
$LN76@DrawWuLine:
	fcomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5
	jnp	SHORT $LN279@DrawWuLine
	xor	edx, 255				; 000000ffH
$LN279@DrawWuLine:
	mov	DWORD PTR tv665[ebp], edx
	fnstcw	WORD PTR tv1416[ebp]
	fild	DWORD PTR tv665[ebp]
	mov	edx, DWORD PTR tv1337[ebp]
	sub	edx, DWORD PTR tv1469[ebp]
	movzx	eax, WORD PTR tv1416[ebp]
	mov	DWORD PTR tv1417[ebp], edx
	fdivrp	ST(2), ST(0)
	or	eax, 3072				; 00000c00H
	fild	DWORD PTR tv1417[ebp]
	mov	DWORD PTR tv1413[ebp], eax
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fldcw	WORD PTR tv1413[ebp]
	fistp	DWORD PTR tv1411[ebp]
	mov	al, BYTE PTR tv1411[ebp]
	fldcw	WORD PTR tv1416[ebp]
$LN77@DrawWuLine:
; Line 182
	movzx	edx, BYTE PTR _rr$232864[ebp]
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, cl
	or	eax, ecx
	shl	eax, 8
	or	eax, edx
	push	eax
	mov	eax, DWORD PTR [ebx+4]
	push	edi
	push	esi
	push	eax
	call	DWORD PTR __imp__SetPixel@16
; Line 184
	mov	ecx, DWORD PTR [ebx+4]
	lea	eax, DWORD PTR [edi+1]
	push	eax
	push	esi
	push	ecx
	call	DWORD PTR __imp__GetPixel@12
; Line 186
	mov	ecx, eax
	shr	ecx, 8
	mov	BYTE PTR _gb$232856[ebp], cl
; Line 188
	movzx	ecx, cl
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	DWORD PTR tv1462[ebp], ecx
	movzx	ecx, al
	fild	DWORD PTR tv1462[ebp]
	mov	BYTE PTR _bb$232860[ebp], dl
	mov	DWORD PTR tv1759[ebp], ecx
	movzx	edx, dl
	fild	DWORD PTR tv1759[ebp]
	mov	DWORD PTR tv1469[ebp], edx
	fild	DWORD PTR tv1469[ebp]
	fld	ST(1)
	fmul	QWORD PTR __real@3fd322d0e5604189
	fld	ST(3)
	fmul	QWORD PTR __real@3fe2c8b439581062
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR __real@3fbd2f1a9fbe76c9
	faddp	ST(1), ST(0)
; Line 193
	cmp	al, BYTE PTR _clrLine$[ebp]
	jbe	SHORT $LN82@DrawWuLine
	mov	edx, DWORD PTR tv1363[ebp]
	fstp	ST(2)
	fld	QWORD PTR _grayl$[ebp]
	fcom	ST(2)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN78@DrawWuLine
	mov	eax, edx
	xor	eax, 255				; 000000ffH
	mov	DWORD PTR tv724[ebp], eax
	jmp	SHORT $LN79@DrawWuLine
$LN78@DrawWuLine:
	mov	DWORD PTR tv724[ebp], edx
$LN79@DrawWuLine:
	fild	DWORD PTR tv724[ebp]
	sub	ecx, DWORD PTR tv1697[ebp]
	fld	QWORD PTR __real@406fe00000000000
	mov	DWORD PTR tv1390[ebp], ecx
	fnstcw	WORD PTR tv1389[ebp]
	fdiv	ST(1), ST(0)
	movzx	eax, WORD PTR tv1389[ebp]
	or	eax, 3072				; 00000c00H
	fild	DWORD PTR tv1390[ebp]
	mov	DWORD PTR tv1386[ebp], eax
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR tv1699[ebp]
	fldcw	WORD PTR tv1386[ebp]
	fistp	DWORD PTR tv1384[ebp]
	mov	cl, BYTE PTR tv1384[ebp]
	fldcw	WORD PTR tv1389[ebp]
	mov	BYTE PTR _rr$232864[ebp], cl
	jmp	SHORT $LN83@DrawWuLine
$LN82@DrawWuLine:
	fld	QWORD PTR _grayl$[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN80@DrawWuLine
	mov	edx, DWORD PTR tv1363[ebp]
	xor	edx, 255				; 000000ffH
	mov	DWORD PTR tv742[ebp], edx
	jmp	SHORT $LN81@DrawWuLine
$LN80@DrawWuLine:
	mov	eax, DWORD PTR tv1363[ebp]
	mov	DWORD PTR tv742[ebp], eax
$LN81@DrawWuLine:
	fild	DWORD PTR tv742[ebp]
	mov	edx, DWORD PTR tv1697[ebp]
	fld	QWORD PTR __real@406fe00000000000
	sub	edx, ecx
	mov	DWORD PTR tv1375[ebp], edx
	fnstcw	WORD PTR tv1374[ebp]
	fdiv	ST(1), ST(0)
	movzx	eax, WORD PTR tv1374[ebp]
	mov	edx, DWORD PTR tv1363[ebp]
	or	eax, 3072				; 00000c00H
	fild	DWORD PTR tv1375[ebp]
	mov	DWORD PTR tv1371[ebp], eax
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	faddp	ST(5), ST(0)
	fldcw	WORD PTR tv1371[ebp]
	fxch	ST(4)
	fistp	DWORD PTR tv1369[ebp]
	mov	al, BYTE PTR tv1369[ebp]
	fldcw	WORD PTR tv1374[ebp]
	mov	BYTE PTR _rr$232864[ebp], al
	fxch	ST(1)
	fxch	ST(3)
$LN83@DrawWuLine:
; Line 197
	mov	cl, BYTE PTR _gb$232856[ebp]
	cmp	cl, BYTE PTR _gl$[ebp]
	jbe	SHORT $LN88@DrawWuLine
	fstp	ST(4)
	fcom	ST(2)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN84@DrawWuLine
	mov	eax, edx
	xor	eax, 255				; 000000ffH
	mov	DWORD PTR tv764[ebp], eax
	jmp	SHORT $LN85@DrawWuLine
$LN84@DrawWuLine:
	mov	DWORD PTR tv764[ebp], edx
$LN85@DrawWuLine:
	fild	DWORD PTR tv764[ebp]
	mov	eax, DWORD PTR tv1462[ebp]
	sub	eax, DWORD PTR tv1330[ebp]
	fnstcw	WORD PTR tv1356[ebp]
	fdiv	ST(0), ST(4)
	mov	DWORD PTR tv1359[ebp], eax
	movzx	eax, WORD PTR tv1356[ebp]
	or	eax, 3072				; 00000c00H
	fild	DWORD PTR tv1359[ebp]
	mov	DWORD PTR tv1353[ebp], eax
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR tv1331[ebp]
	fldcw	WORD PTR tv1353[ebp]
	fistp	DWORD PTR tv899[ebp]
	mov	cl, BYTE PTR tv899[ebp]
	fldcw	WORD PTR tv1356[ebp]
	jmp	SHORT $LN89@DrawWuLine
$LN88@DrawWuLine:
	fxch	ST(1)
	fcom	ST(3)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN86@DrawWuLine
	mov	ecx, edx
	xor	ecx, 255				; 000000ffH
	mov	DWORD PTR tv782[ebp], ecx
	jmp	SHORT $LN87@DrawWuLine
$LN86@DrawWuLine:
	mov	DWORD PTR tv782[ebp], edx
$LN87@DrawWuLine:
	fild	DWORD PTR tv782[ebp]
	mov	eax, DWORD PTR tv1330[ebp]
	sub	eax, DWORD PTR tv1462[ebp]
	fnstcw	WORD PTR tv1342[ebp]
	fdiv	ST(0), ST(2)
	mov	DWORD PTR tv1343[ebp], eax
	movzx	eax, WORD PTR tv1342[ebp]
	or	eax, 3072				; 00000c00H
	fild	DWORD PTR tv1343[ebp]
	mov	DWORD PTR tv1339[ebp], eax
	fmulp	ST(1), ST(0)
	faddp	ST(5), ST(0)
	fldcw	WORD PTR tv1339[ebp]
	fxch	ST(4)
	fistp	DWORD PTR tv1335[ebp]
	mov	cl, BYTE PTR tv1335[ebp]
	fldcw	WORD PTR tv1342[ebp]
	fxch	ST(3)
$LN89@DrawWuLine:
; Line 201
	mov	al, BYTE PTR _bb$232860[ebp]
	cmp	al, BYTE PTR _bl$[ebp]
	jbe	SHORT $LN94@DrawWuLine
	fstp	ST(1)
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN90@DrawWuLine
	xor	edx, 255				; 000000ffH
$LN90@DrawWuLine:
	mov	eax, DWORD PTR tv1469[ebp]
	fnstcw	WORD PTR tv1324[ebp]
	sub	eax, DWORD PTR tv1337[ebp]
	mov	DWORD PTR tv804[ebp], edx
	fidivr	DWORD PTR tv804[ebp]
	mov	DWORD PTR tv1326[ebp], eax
	movzx	eax, WORD PTR tv1324[ebp]
	or	eax, 3072				; 00000c00H
	fild	DWORD PTR tv1326[ebp]
	mov	DWORD PTR tv1320[ebp], eax
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR tv1338[ebp]
	fldcw	WORD PTR tv1320[ebp]
	fistp	DWORD PTR tv1318[ebp]
	mov	al, BYTE PTR tv1318[ebp]
	fldcw	WORD PTR tv1324[ebp]
	jmp	SHORT $LN95@DrawWuLine
$LN94@DrawWuLine:
	fcomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5
	jp	SHORT $LN92@DrawWuLine
	xor	edx, 255				; 000000ffH
$LN92@DrawWuLine:
	mov	DWORD PTR tv822[ebp], edx
	fnstcw	WORD PTR tv1295[ebp]
	fild	DWORD PTR tv822[ebp]
	mov	edx, DWORD PTR tv1337[ebp]
	sub	edx, DWORD PTR tv1469[ebp]
	movzx	eax, WORD PTR tv1295[ebp]
	mov	DWORD PTR tv1296[ebp], edx
	fdivrp	ST(2), ST(0)
	or	eax, 3072				; 00000c00H
	fild	DWORD PTR tv1296[ebp]
	mov	DWORD PTR tv1292[ebp], eax
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fldcw	WORD PTR tv1292[ebp]
	fistp	DWORD PTR tv1288[ebp]
	mov	al, BYTE PTR tv1288[ebp]
	fldcw	WORD PTR tv1295[ebp]
$LN95@DrawWuLine:
; Line 203
	movzx	edx, BYTE PTR _rr$232864[ebp]
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, cl
	or	eax, ecx
	shl	eax, 8
	or	eax, edx
	push	eax
	lea	eax, DWORD PTR [edi+1]
	push	eax
	mov	eax, DWORD PTR [ebx+4]
	push	esi
	push	eax
	call	DWORD PTR __imp__SetPixel@16
	dec	DWORD PTR _DeltaX$[ebp]
	jne	$LL3@DrawWuLine
$LN2@DrawWuLine:
; Line 208
	mov	ecx, DWORD PTR _clrLine$[ebp]
	mov	edx, DWORD PTR _Y1$[ebp]
	mov	eax, DWORD PTR _X1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [ebx+4]
	push	edx
	push	eax
	push	ecx
	call	DWORD PTR __imp__SetPixel@16
$LN114@DrawWuLine:
; Line 209
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawWuLine@@YAXPAVCDC@@HHHHK@Z ENDP			; DrawWuLine
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?OnAsrContentToBeClosed@euroNatRadarScreen@@UAEXXZ
_TEXT	SEGMENT
?OnAsrContentToBeClosed@euroNatRadarScreen@@UAEXXZ PROC	; euroNatRadarScreen::OnAsrContentToBeClosed, COMDAT
; _this$ = ecx
; File c:\users\michael\desktop\code\euronat\euronatradarscreen.h
; Line 36
	test	ecx, ecx
	je	SHORT $LN3@OnAsrConte@2
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+68]
	push	1
	call	edx
$LN3@OnAsrConte@2:
; Line 37
	ret	0
?OnAsrContentToBeClosed@euroNatRadarScreen@@UAEXXZ ENDP	; euroNatRadarScreen::OnAsrContentToBeClosed
; Function compile flags: /Ogtp
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT
??0CGdiObject@@QAE@XZ PROC				; CGdiObject::CGdiObject, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\afxwin1.inl
; Line 75
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET ??_7CGdiObject@@6B@
	mov	DWORD PTR [eax+4], 0
	ret	0
??0CGdiObject@@QAE@XZ ENDP				; CGdiObject::CGdiObject
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetCurrentPosition@CDC@@QBE?AVCPoint@@XZ
_TEXT	SEGMENT
_point$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
?GetCurrentPosition@CDC@@QBE?AVCPoint@@XZ PROC		; CDC::GetCurrentPosition, COMDAT
; _this$ = ecx
; Line 463
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 8
; Line 466
	mov	ecx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR _point$[esp+8]
	push	eax
	push	ecx
	call	DWORD PTR __imp__GetCurrentPositionEx@8
; Line 467
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR _point$[esp+8]
	mov	ecx, DWORD PTR _point$[esp+12]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
; Line 468
	mov	esp, ebp
	pop	ebp
	ret	4
?GetCurrentPosition@CDC@@QBE?AVCPoint@@XZ ENDP		; CDC::GetCurrentPosition
; Function compile flags: /Ogtp
;	COMDAT ?DrawTextExA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z
_TEXT	SEGMENT
?DrawTextExA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z PROC ; CDC::DrawTextExA, COMDAT
; _this$ = ecx
; _str$ = eax
; _lpRect$ = edi
; Line 618
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax-12]
	push	esi
	mov	esi, DWORD PTR [ecx]
	push	0
	push	261					; 00000105H
	push	edi
	push	edx
	mov	edx, DWORD PTR [esi+108]
	push	eax
	call	edx
	pop	esi
	ret	0
?DrawTextExA@CDC@@QAEHABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PAUtagRECT@@IPAUtagDRAWTEXTPARAMS@@@Z ENDP ; CDC::DrawTextExA
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?TextOutA@CDC@@QAEHHHABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?TextOutA@CDC@@QAEHHHABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CDC::TextOutA, COMDAT
; _this$ = ecx
; _str$ = eax
; Line 581
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax-12]
	push	esi
	mov	esi, DWORD PTR [ecx]
	push	edx
	mov	edx, DWORD PTR _y$[ebp]
	push	eax
	mov	eax, DWORD PTR _x$[ebp]
	push	edx
	mov	edx, DWORD PTR [esi+92]
	push	eax
	call	edx
	pop	esi
	pop	ebp
	ret	8
?TextOutA@CDC@@QAEHHHABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CDC::TextOutA
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pStringMgr$ = 8					; size = 4
??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z PROC ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\cstringt.h
; Line 930
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _pStringMgr$[ebp]
	test	ecx, ecx
	jne	SHORT $LN11@CStringT@2
	push	-2147467259				; 80004005H
	call	?AtlThrowImpl@ATL@@YGXJ@Z		; ATL::AtlThrowImpl
$LN21@CStringT@2:
$LN11@CStringT@2:
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	add	eax, 16					; 00000010H
	mov	DWORD PTR [esi], eax
; Line 931
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
$LN20@CStringT@2:
??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ENDP ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??9ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z
_TEXT	SEGMENT
_str1$ = 8						; size = 4
_psz2$ = 12						; size = 4
??9ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z PROC ; ATL::operator!=, COMDAT
; Line 2429
	push	ebp
	mov	ebp, esp
; Line 2430
	mov	ecx, DWORD PTR _psz2$[ebp]
	test	ecx, ecx
	jne	SHORT $LN14@operator@6
	push	-2147467259				; 80004005H
	call	?AtlThrowImpl@ATL@@YGXJ@Z		; ATL::AtlThrowImpl
$LN26@operator@6:
$LN14@operator@6:
	mov	eax, DWORD PTR _str1$[ebp]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	eax
	call	__mbscmp
	add	esp, 8
	neg	eax
	sbb	eax, eax
	neg	eax
; Line 2431
	pop	ebp
	ret	0
$LN25@operator@6:
??9ATL@@YA_NABV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBD@Z ENDP ; ATL::operator!=
; Function compile flags: /Ogtp
;	COMDAT ?Concatenate@?$CSimpleStringT@D$0A@@ATL@@KAXAAV12@PBDH1H@Z
_TEXT	SEGMENT
_strResult$ = 8						; size = 4
_psz1$ = 12						; size = 4
_pszBuffer$ = 16					; size = 4
_nLength1$ = 16						; size = 4
_psz2$ = 20						; size = 4
_nLength2$ = 24						; size = 4
?Concatenate@?$CSimpleStringT@D$0A@@ATL@@KAXAAV12@PBDH1H@Z PROC ; ATL::CSimpleStringT<char,0>::Concatenate, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atlsimpstr.h
; Line 787
	push	ebp
	mov	ebp, esp
; Line 788
	mov	eax, DWORD PTR _nLength2$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _nLength1$[ebp]
	push	esi
	lea	esi, DWORD PTR [ebx+eax]
	push	edi
; Line 789
	test	esi, esi
	jns	SHORT $LN6@Concatenat
; Line 792
$LN19@Concatenat:
; Line 789
	push	-2147024809				; 80070057H
	call	?AtlThrowImpl@ATL@@YGXJ@Z		; ATL::AtlThrowImpl
$LN29@Concatenat:
$LN6@Concatenat:
	mov	edi, DWORD PTR _strResult$[ebp]
	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax-8]
	mov	ecx, 1
	sub	ecx, DWORD PTR [eax-4]
	sub	edx, esi
	or	ecx, edx
	jge	SHORT $LN5@Concatenat
	push	esi
	mov	ecx, edi
	call	?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
$LN5@Concatenat:
; Line 790
	mov	ecx, DWORD PTR _psz1$[ebp]
	mov	eax, DWORD PTR [edi]
	push	ebx
	push	ecx
	push	ebx
	push	eax
	mov	DWORD PTR _pszBuffer$[ebp], eax
	call	_memcpy_s
; Line 791
	mov	eax, DWORD PTR _nLength2$[ebp]
	mov	edx, DWORD PTR _psz2$[ebp]
	push	eax
	push	edx
	push	eax
	mov	eax, DWORD PTR _pszBuffer$[ebp]
	add	eax, ebx
	push	eax
	call	_memcpy_s
; Line 792
	mov	eax, DWORD PTR [edi]
	add	esp, 32					; 00000020H
	cmp	esi, DWORD PTR [eax-8]
	jg	SHORT $LN19@Concatenat
	mov	DWORD PTR [eax-12], esi
	mov	ecx, DWORD PTR [edi]
	pop	edi
	mov	BYTE PTR [esi+ecx], 0
	pop	esi
	pop	ebx
; Line 793
	pop	ebp
	ret	0
$LN28@Concatenat:
?Concatenate@?$CSimpleStringT@D$0A@@ATL@@KAXAAV12@PBDH1H@Z ENDP ; ATL::CSimpleStringT<char,0>::Concatenate
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z$0
__ehfuncinfo$??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ch$ = 8						; size = 1
_nLength$ = 12						; size = 4
??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z PROC ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\cstringt.h
; Line 1094
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	edi, ecx
	mov	DWORD PTR _this$[ebp], edi
	call	?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ ; AfxGetStringManager
	xor	ecx, ecx
	test	eax, eax
	setne	cl
	test	ecx, ecx
	jne	SHORT $LN15@CStringT@5
	push	-2147467259				; 80004005H
	call	?AtlThrowImpl@ATL@@YGXJ@Z		; ATL::AtlThrowImpl
$LN48@CStringT@5:
$LN15@CStringT@5:
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	eax, 16					; 00000010H
	mov	DWORD PTR [edi], eax
; Line 1096
	mov	esi, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	esi, esi
	jle	SHORT $LN39@CStringT@5
; Line 1098
	mov	edx, DWORD PTR [eax-8]
	mov	ecx, 1
	sub	ecx, DWORD PTR [eax-4]
	sub	edx, esi
	or	ecx, edx
	jge	SHORT $LN26@CStringT@5
	push	esi
	mov	ecx, edi
	call	?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
$LN26@CStringT@5:
; Line 1099
	movsx	eax, BYTE PTR _ch$[ebp]
	mov	ecx, DWORD PTR [edi]
	push	esi
	push	eax
	push	ecx
	call	_memset
; Line 1100
	mov	eax, DWORD PTR [edi]
	add	esp, 12					; 0000000cH
	cmp	esi, DWORD PTR [eax-8]
	jg	SHORT $LN37@CStringT@5
	mov	DWORD PTR [eax-12], esi
	mov	edx, DWORD PTR [edi]
	mov	BYTE PTR [esi+edx], 0
$LN39@CStringT@5:
; Line 1102
	mov	eax, edi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
; Line 1100
$LN37@CStringT@5:
	push	-2147024809				; 80070057H
	call	?AtlThrowImpl@ATL@@YGXJ@Z		; ATL::AtlThrowImpl
$LN49@CStringT@5:
$LN47@CStringT@5:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ	; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
__ehhandler$??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z ENDP ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
__unwindtable$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z$0
__ehfuncinfo$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z
_TEXT	SEGMENT
tv225 = -24						; size = 4
$T244219 = -20						; size = 4
$T244128 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_psz1$ = 12						; size = 4
tv303 = 16						; size = 4
_pszBuffer$244293 = 16					; size = 4
_str2$ = 16						; size = 4
??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z PROC ; ATL::operator+, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\cstringt.h
; Line 2314
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 2315
	mov	esi, DWORD PTR _str2$[ebp]
	xor	edi, edi
	mov	DWORD PTR __$EHRec$[ebp+8], edi
	mov	DWORD PTR $T244128[ebp], edi
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax-16]
	cmp	ecx, edi
	je	SHORT $LN5@operator@12
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	eax, edi
	jne	SHORT $LN27@operator@12
$LN5@operator@12:
	call	?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ ; AfxGetStringManager
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+16]
	call	eax
$LN27@operator@12:
	xor	ecx, ecx
	cmp	eax, edi
	setne	cl
	cmp	ecx, edi
	jne	SHORT $LN26@operator@12
	push	-2147467259				; 80004005H
	call	?AtlThrowImpl@ATL@@YGXJ@Z		; ATL::AtlThrowImpl
$LN75@operator@12:
$LN26@operator@12:
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ebx, DWORD PTR ___$ReturnUdt$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR [ebx], eax
; Line 2319
	mov	edx, DWORD PTR _psz1$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], edi
	mov	ecx, DWORD PTR [esi]
	mov	esi, DWORD PTR [ecx-12]
	mov	DWORD PTR $T244128[ebp], 1
	mov	DWORD PTR tv225[ebp], ecx
	mov	DWORD PTR $T244219[ebp], esi
	cmp	edx, edi
	je	SHORT $LN43@operator@12
; Line 2317
	mov	edi, edx
	lea	ecx, DWORD PTR [edi+1]
	mov	DWORD PTR tv303[ebp], ecx
	npad	1
$LL72@operator@12:
	mov	cl, BYTE PTR [edi]
	inc	edi
	test	cl, cl
	jne	SHORT $LL72@operator@12
	sub	edi, DWORD PTR tv303[ebp]
$LN43@operator@12:
	add	esi, edi
	jns	SHORT $LN50@operator@12
$LN63@operator@12:
	push	-2147024809				; 80070057H
	call	?AtlThrowImpl@ATL@@YGXJ@Z		; ATL::AtlThrowImpl
$LN76@operator@12:
$LN50@operator@12:
	mov	ecx, 1
	sub	ecx, DWORD PTR [eax-4]
	mov	eax, DWORD PTR [eax-8]
	sub	eax, esi
	or	eax, ecx
	jge	SHORT $LN49@operator@12
	push	esi
	mov	ecx, ebx
	call	?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
	mov	edx, DWORD PTR _psz1$[ebp]
$LN49@operator@12:
	mov	eax, DWORD PTR [ebx]
	push	edi
	push	edx
	push	edi
	push	eax
	mov	DWORD PTR _pszBuffer$244293[ebp], eax
	call	_memcpy_s
	mov	eax, DWORD PTR $T244219[ebp]
	mov	edx, DWORD PTR tv225[ebp]
	push	eax
	push	edx
	push	eax
	mov	eax, DWORD PTR _pszBuffer$244293[ebp]
	add	eax, edi
	push	eax
	call	_memcpy_s
	mov	eax, DWORD PTR [ebx]
	add	esp, 32					; 00000020H
	cmp	esi, DWORD PTR [eax-8]
	jg	SHORT $LN63@operator@12
	mov	DWORD PTR [eax-12], esi
	mov	ecx, DWORD PTR [ebx]
	mov	BYTE PTR [esi+ecx], 0
; Line 2319
	mov	eax, ebx
; Line 2320
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN74@operator@12:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z$0:
	mov	eax, DWORD PTR $T244128[ebp]
	and	eax, 1
	je	$LN4@operator@12
	and	DWORD PTR $T244128[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
$LN4@operator@12:
	ret	0
__ehhandler$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z ENDP ; ATL::operator+
; Function compile flags: /Ogtp
;	COMDAT ?OnAsrContentToBeSaved@euroNatRadarScreen@@UAEXXZ
_TEXT	SEGMENT
?OnAsrContentToBeSaved@euroNatRadarScreen@@UAEXXZ PROC	; euroNatRadarScreen::OnAsrContentToBeSaved, COMDAT
; _this$ = ecx
; File c:\users\michael\desktop\code\euronat\euronatradarscreen.cpp
; Line 234
	push	edi
; Line 235
	mov	edi, DWORD PTR [ecx+8]
	call	?Save@NATShow@@SAXPAVCPlugIn@EuroScopePlugIn@@@Z ; NATShow::Save
	pop	edi
; Line 236
	ret	0
?OnAsrContentToBeSaved@euroNatRadarScreen@@UAEXXZ ENDP	; euroNatRadarScreen::OnAsrContentToBeSaved
; Function compile flags: /Ogtp
;	COMDAT ??0CFont@@QAE@XZ
_TEXT	SEGMENT
??0CFont@@QAE@XZ PROC					; CFont::CFont, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\afxwin1.inl
; Line 158
	mov	eax, ecx
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax], OFFSET ??_7CFont@@6B@
	ret	0
??0CFont@@QAE@XZ ENDP					; CFont::CFont
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT
??1CFont@@UAE@XZ PROC					; CFont::~CFont, COMDAT
; _this$ = ecx
; Line 160
	mov	DWORD PTR [ecx], OFFSET ??_7CFont@@6B@
	jmp	??1CGdiObject@@UAE@XZ			; CGdiObject::~CGdiObject
??1CFont@@UAE@XZ ENDP					; CFont::~CFont
_TEXT	ENDS
PUBLIC	??0euroNatRadarScreen@@QAE@PAUNAT@@PAH@Z	; euroNatRadarScreen::euroNatRadarScreen
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_pNat$ = 8						; size = 4
_pCount$ = 12						; size = 4
??0euroNatRadarScreen@@QAE@PAUNAT@@PAH@Z PROC		; euroNatRadarScreen::euroNatRadarScreen
; _this$ = esi
; File c:\users\michael\desktop\code\euronat\euronatradarscreen.cpp
; Line 11
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_??0CRadarScreen@EuroScopePlugIn@@QAE@XZ
; Line 12
	mov	eax, DWORD PTR _pNat$[ebp]
; Line 13
	mov	ecx, DWORD PTR _pCount$[ebp]
; Line 15
	push	8
	mov	DWORD PTR [esi], OFFSET ??_7euroNatRadarScreen@@6B@
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], ecx
	call	??2@YAPAXI@Z				; operator new
	xor	ebx, ebx
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN3@euroNatRad@2
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax], OFFSET ??_7CFont@@6B@
	jmp	SHORT $LN4@euroNatRad@2
$LN3@euroNatRad@2:
	xor	eax, eax
$LN4@euroNatRad@2:
; Line 16
	push	8
	mov	DWORD PTR [esi+24], eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN5@euroNatRad@2
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax], OFFSET ??_7CFont@@6B@
	jmp	SHORT $LN6@euroNatRad@2
$LN5@euroNatRad@2:
	xor	eax, eax
$LN6@euroNatRad@2:
; Line 28
	push	OFFSET ??_C@_09DGOPBADF@EuroScope?$AA@
	push	ebx
	push	ebx
	mov	edi, DWORD PTR [esi+24]
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	400					; 00000190H
	push	ebx
	push	ebx
	mov	ebx, DWORD PTR __imp__CreateFontA@56
	push	7
	push	13					; 0000000dH
	mov	DWORD PTR [esi+28], eax
	call	ebx
	push	eax
	mov	ecx, edi
	call	?Attach@CGdiObject@@QAEHPAX@Z		; CGdiObject::Attach
; Line 40
	push	OFFSET ??_C@_09DGOPBADF@EuroScope?$AA@
	push	0
	push	0
	mov	edi, DWORD PTR [esi+28]
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	700					; 000002bcH
	push	0
	push	0
	push	7
	push	13					; 0000000dH
	call	ebx
	push	eax
	mov	ecx, edi
	call	?Attach@CGdiObject@@QAEHPAX@Z		; CGdiObject::Attach
	pop	edi
; Line 42
	mov	DWORD PTR [esi+36], -1
; Line 43
	mov	eax, esi
	pop	ebx
	pop	ebp
	ret	8
??0euroNatRadarScreen@@QAE@PAUNAT@@PAH@Z ENDP		; euroNatRadarScreen::euroNatRadarScreen
; Function compile flags: /Ogtp
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCFont@@UAEPAXI@Z PROC				; CFont::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7CFont@@6B@
	call	??1CGdiObject@@UAE@XZ			; CGdiObject::~CGdiObject
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN9@scalar@10
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN9@scalar@10:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GCFont@@UAEPAXI@Z ENDP				; CFont::`scalar deleting destructor'
PUBLIC	__real@4024000000000000
PUBLIC	__$ArrayPad$
EXTRN	__CIsqrt:PROC
;	COMDAT __real@4024000000000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atlsimpstr.h
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$9
	DD	00H
	DD	FLAT:__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$8
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z
_TEXT	SEGMENT
_lastWPunknown$233001 = -269				; size = 1
_tmpPoint$232995 = -268					; size = 8
_str$233032 = -260					; size = 4
_i$232987 = -260					; size = 4
_dc$232946 = -256					; size = 16
tv1926 = -240						; size = 4
$T246640 = -240						; size = 4
tv1357 = -236						; size = 4
$T246639 = -236						; size = 4
$T246638 = -236						; size = 4
$T246611 = -232						; size = 4
$T246615 = -228						; size = 4
tv1910 = -224						; size = 4
_wp$233010 = -224					; size = 4
tv1903 = -220						; size = 4
_cursorPos$232945 = -216				; size = 8
_hpen_west$232961 = -208				; size = 4
_hpen_east$232960 = -204				; size = 4
_hpen_concorde$232962 = -200				; size = 4
_solidstyle$232956 = -196				; size = 8
tv1849 = -188						; size = 4
$T246633 = -188						; size = 8
$T246616 = -188						; size = 4
$T246612 = -188						; size = 4
$T246621 = -180						; size = 4
$T246624 = -176						; size = 4
_oldFont$232947 = -172					; size = 4
_point$246972 = -168					; size = 8
_rect$232954 = -160					; size = 16
_point$246981 = -144					; size = 8
$T246625 = -136						; size = 8
$T246626 = -128						; size = 8
$T246635 = -120						; size = 8
_tmpRect$232999 = -112					; size = 16
_line_west$232958 = -96					; size = 12
_line_east$232957 = -84					; size = 12
_line_concorde$232959 = -72				; size = 12
_radarArea$ = -60					; size = 16
_dottedstyle$232955 = -44				; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_hDC$ = 8						; size = 4
_Phase$ = 12						; size = 4
?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z PROC	; euroNatRadarScreen::OnRefresh, COMDAT
; _this$ = ecx
; File c:\users\michael\desktop\code\euronat\euronatradarscreen.cpp
; Line 51
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	-1
	push	__ehhandler$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 264				; 00000108H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+276], eax
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+292]
	mov	DWORD PTR fs:0, eax
	mov	edi, DWORD PTR _hDC$[ebp]
	mov	esi, ecx
; Line 52
	call	DWORD PTR __imp__GetTickCount@0
; Line 54
	lea	eax, DWORD PTR _radarArea$[esp+292]
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?GetRadarArea@CRadarScreen@EuroScopePlugIn@@QAE?AUtagRECT@@XZ
; Line 56
	cmp	DWORD PTR _Phase$[ebp], 1
	jne	$LN36@OnRefresh
; Line 60
	lea	ecx, DWORD PTR _cursorPos$232945[esp+292]
	push	ecx
	mov	DWORD PTR [esi+36], -1
	call	DWORD PTR __imp__GetCursorPos@4
; Line 62
	lea	ecx, DWORD PTR _dc$232946[esp+292]
	call	??0CDC@@QAE@XZ				; CDC::CDC
	xor	ebx, ebx
; Line 63
	push	edi
	lea	ecx, DWORD PTR _dc$232946[esp+296]
	mov	DWORD PTR __$EHRec$[esp+304], ebx
	call	?Attach@CDC@@QAEHPAUHDC__@@@Z		; CDC::Attach
; Line 65
	mov	edx, DWORD PTR [esi+24]
	push	edx
	lea	ecx, DWORD PTR _dc$232946[esp+296]
	call	?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z	; CDC::SelectObject
; Line 67
	push	9868950					; 00969696H
	lea	ecx, DWORD PTR _dc$232946[esp+296]
	mov	DWORD PTR _oldFont$232947[esp+296], eax
	call	?SetTextColor@CDC@@UAEKK@Z		; CDC::SetTextColor
; Line 75
	mov	ecx, DWORD PTR ?WestboundColor@NATShow@@2KA ; NATShow::WestboundColor
; Line 76
	mov	edx, DWORD PTR ?ConcordeColor@NATShow@@2KA ; NATShow::ConcordeColor
	xor	eax, eax
	mov	DWORD PTR _dottedstyle$232955[esp+300], eax
	mov	DWORD PTR _dottedstyle$232955[esp+304], eax
	mov	DWORD PTR _dottedstyle$232955[esp+308], eax
	mov	DWORD PTR _dottedstyle$232955[esp+312], eax
	mov	eax, DWORD PTR ?EastboundColor@NATShow@@2KA ; NATShow::EastboundColor
	mov	DWORD PTR _line_east$232957[esp+296], eax
	mov	DWORD PTR _dottedstyle$232955[esp+292], 2
	mov	DWORD PTR _dottedstyle$232955[esp+296], 6
	mov	DWORD PTR _solidstyle$232956[esp+292], 1
	mov	DWORD PTR _solidstyle$232956[esp+296], ebx
	mov	DWORD PTR _line_west$232958[esp+296], ecx
	mov	DWORD PTR _line_concorde$232959[esp+296], edx
; Line 77
	mov	DWORD PTR _line_concorde$232959[esp+292], ebx
	mov	DWORD PTR _line_west$232958[esp+292], ebx
	mov	DWORD PTR _line_east$232957[esp+292], ebx
; Line 79
	lea	eax, DWORD PTR _dottedstyle$232955[esp+292]
	cmp	BYTE PTR ?DottedLines@NATShow@@2_NA, bl	; NATShow::DottedLines
	jne	SHORT $LN40@OnRefresh
	lea	eax, DWORD PTR _solidstyle$232956[esp+292]
$LN40@OnRefresh:
	mov	edi, DWORD PTR __imp__ExtCreatePen@20
	push	eax
	push	2
	lea	eax, DWORD PTR _line_east$232957[esp+300]
	push	eax
	push	1
	push	65543					; 00010007H
	call	edi
	mov	DWORD PTR _hpen_east$232960[esp+292], eax
; Line 80
	lea	eax, DWORD PTR _dottedstyle$232955[esp+292]
	cmp	BYTE PTR ?DottedLines@NATShow@@2_NA, bl	; NATShow::DottedLines
	jne	SHORT $LN42@OnRefresh
	lea	eax, DWORD PTR _solidstyle$232956[esp+292]
$LN42@OnRefresh:
	push	eax
	push	2
	lea	ecx, DWORD PTR _line_west$232958[esp+300]
	push	ecx
	push	1
	push	65543					; 00010007H
	call	edi
	mov	DWORD PTR _hpen_west$232961[esp+292], eax
; Line 81
	lea	eax, DWORD PTR _dottedstyle$232955[esp+292]
	cmp	BYTE PTR ?DottedLines@NATShow@@2_NA, bl	; NATShow::DottedLines
	jne	SHORT $LN44@OnRefresh
	lea	eax, DWORD PTR _solidstyle$232956[esp+292]
$LN44@OnRefresh:
	push	eax
	push	2
	lea	edx, DWORD PTR _line_concorde$232959[esp+300]
	push	edx
	push	1
	push	65543					; 00010007H
	call	edi
; Line 85
	push	8
	mov	DWORD PTR _hpen_concorde$232962[esp+296], eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T246612[esp+292], eax
	mov	BYTE PTR __$EHRec$[esp+300], 1
	cmp	eax, ebx
	je	SHORT $LN45@OnRefresh
	push	6579300					; 00646464H
	push	ebx
	push	ebx
	mov	ecx, eax
	call	??0CPen@@QAE@HHK@Z			; CPen::CPen
	mov	DWORD PTR $T246611[esp+292], eax
	jmp	SHORT $LN46@OnRefresh
$LN45@OnRefresh:
	mov	DWORD PTR $T246611[esp+292], ebx
$LN46@OnRefresh:
; Line 86
	push	8
	mov	BYTE PTR __$EHRec$[esp+304], 0
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T246616[esp+292], eax
	mov	BYTE PTR __$EHRec$[esp+300], 2
	cmp	eax, ebx
	je	SHORT $LN47@OnRefresh
	push	ebx
	mov	ecx, eax
	call	??0CBrush@@QAE@K@Z			; CBrush::CBrush
	mov	DWORD PTR $T246615[esp+292], eax
	jmp	SHORT $LN48@OnRefresh
$LN47@OnRefresh:
	mov	DWORD PTR $T246615[esp+292], ebx
$LN48@OnRefresh:
	mov	BYTE PTR __$EHRec$[esp+300], 0
; Line 88
	mov	eax, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv1357[esp+292], eax
; Line 89
	cmp	eax, ebx
	jle	$LN32@OnRefresh
; Line 90
	mov	DWORD PTR _i$232987[esp+292], 0
	test	eax, eax
	jle	$LN32@OnRefresh
	xor	edi, edi
	mov	DWORD PTR tv1926[esp+292], edi
	npad	7
$LL34@OnRefresh:
; Line 94
	mov	ecx, DWORD PTR [esi+12]
	lea	eax, DWORD PTR [edi+ecx]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN29@OnRefresh
	cmp	BYTE PTR ?Eastbound@NATShow@@2_NA, 0	; NATShow::Eastbound
	je	$LN33@OnRefresh
$LN29@OnRefresh:
	cmp	ecx, 2
	jne	SHORT $LN28@OnRefresh
	cmp	BYTE PTR ?Westbound@NATShow@@2_NA, 0	; NATShow::Westbound
	je	$LN33@OnRefresh
$LN28@OnRefresh:
	cmp	BYTE PTR [eax+580], 0
	je	SHORT $LN31@OnRefresh
	cmp	BYTE PTR ?ConcordTracks@NATShow@@2_NA, 0 ; NATShow::ConcordTracks
; Line 95
	je	$LN33@OnRefresh
$LN31@OnRefresh:
; Line 97
	mov	edx, DWORD PTR [eax+104]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+108]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+112]
	mov	eax, DWORD PTR [eax+116]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR _tmpPoint$232995[esp+308]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR __imp_?ConvertCoordFromPositionToPixel@CRadarScreen@EuroScopePlugIn@@QAE?AUtagPOINT@@VCPosition@2@@Z
; Line 98
	cmp	DWORD PTR [esi+36], -1
	jne	SHORT $LN27@OnRefresh
; Line 99
	mov	eax, DWORD PTR _cursorPos$232945[esp+296]
	mov	ecx, DWORD PTR _cursorPos$232945[esp+292]
	sub	ecx, DWORD PTR _tmpPoint$232995[esp+292]
	sub	eax, DWORD PTR _tmpPoint$232995[esp+296]
	imul	ecx, ecx
	imul	eax, eax
	add	ecx, eax
	mov	DWORD PTR tv1910[esp+292], ecx
	fild	DWORD PTR tv1910[esp+292]
	call	__CIsqrt
	fcomp	QWORD PTR __real@4024000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN49@OnRefresh
	mov	eax, DWORD PTR _i$232987[esp+292]
	jmp	SHORT $LN50@OnRefresh
$LN49@OnRefresh:
	or	eax, -1
$LN50@OnRefresh:
	mov	DWORD PTR [esi+36], eax
$LN27@OnRefresh:
; Line 106
	mov	edx, DWORD PTR [esi+12]
	lea	eax, DWORD PTR [edi+edx+96]
	mov	eax, DWORD PTR [eax]
	push	OFFSET ??_C@_06HOJDLJEN@SKIPME?$AA@
	push	eax
	mov	BYTE PTR _lastWPunknown$233001[esp+300], 0
	call	__mbscmp
	add	esp, 8
	test	eax, eax
	setne	al
	test	al, al
	je	$LN26@OnRefresh
; Line 108
	mov	eax, DWORD PTR $T246611[esp+292]
	push	eax
	lea	ecx, DWORD PTR _dc$232946[esp+296]
	call	?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z	; CDC::SelectObject
; Line 109
	mov	ecx, DWORD PTR $T246615[esp+292]
	push	ecx
	lea	ecx, DWORD PTR _dc$232946[esp+296]
	call	?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject
; Line 110
	mov	eax, DWORD PTR _tmpPoint$232995[esp+296]
	mov	edx, DWORD PTR _tmpPoint$232995[esp+292]
	lea	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	ebx, DWORD PTR [edx+4]
	push	ebx
	add	eax, -4					; fffffffcH
	add	edx, -4					; fffffffcH
	push	eax
	push	edx
	mov	edx, DWORD PTR _dc$232946[esp+312]
	push	edx
	call	DWORD PTR __imp__Rectangle@20
; Line 113
	mov	eax, DWORD PTR _tmpPoint$232995[esp+292]
; Line 114
	mov	edx, DWORD PTR _tmpPoint$232995[esp+296]
; Line 117
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR [eax-24]
	push	0
	add	eax, 24					; 00000018H
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _rect$232954[esp+324], eax
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _rect$232954[esp+324]
	lea	ebx, DWORD PTR [edx-24]
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ecx
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	add	edx, 24					; 00000018H
	push	0
	mov	ecx, esi
	mov	DWORD PTR [eax+12], edx
	call	DWORD PTR __imp_?AddScreenObject@CRadarScreen@EuroScopePlugIn@@QAEXHPBDUtagRECT@@_N0@Z
; Line 120
	mov	edx, DWORD PTR _tmpPoint$232995[esp+292]
	mov	eax, DWORD PTR _tmpPoint$232995[esp+296]
	lea	ebx, DWORD PTR [edx+20]
	lea	ecx, DWORD PTR [eax+28]
	add	edx, -20				; ffffffecH
	mov	DWORD PTR _tmpRect$232999[esp+292], edx
; Line 121
	mov	edx, DWORD PTR [esi+12]
	add	eax, 8
	mov	DWORD PTR _tmpRect$232999[esp+296], eax
	lea	eax, DWORD PTR [edi+edx+96]
	push	0
	mov	DWORD PTR _tmpRect$232999[esp+308], ecx
	mov	DWORD PTR _tmpRect$232999[esp+304], ebx
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax-12]
	push	261					; 00000105H
	lea	edx, DWORD PTR _tmpRect$232999[esp+300]
	push	edx
	push	ecx
	push	eax
	mov	eax, DWORD PTR _dc$232946[esp+312]
	mov	edx, DWORD PTR [eax+108]
	lea	ecx, DWORD PTR _dc$232946[esp+312]
	call	edx
; Line 123
	cmp	BYTE PTR ?Letters@NATShow@@2_NA, 0	; NATShow::Letters
	je	$LN25@OnRefresh
; Line 125
	mov	eax, DWORD PTR [esi+28]
	push	eax
	lea	ecx, DWORD PTR _dc$232946[esp+296]
	call	?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z	; CDC::SelectObject
; Line 126
	mov	ecx, DWORD PTR [esi+12]
	cmp	BYTE PTR [edi+ecx+580], 0
	lea	eax, DWORD PTR [edi+ecx]
	mov	ebx, OFFSET ??_C@_01CPLAODJH@S?$AA@
	jne	SHORT $LN52@OnRefresh
	mov	ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN52@OnRefresh:
	movzx	edx, BYTE PTR [eax+4]
	push	1
	push	edx
	lea	ecx, DWORD PTR $T246621[esp+300]
	call	??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@DH@Z ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
	push	eax
	lea	eax, DWORD PTR $T246624[esp+296]
	push	ebx
	push	eax
	mov	BYTE PTR __$EHRec$[esp+312], 3
	call	??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@0@PBDABV10@@Z ; ATL::operator+
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[esp+300], 4
	mov	eax, DWORD PTR [eax]
	mov	ebx, DWORD PTR [eax-12]
	mov	ecx, DWORD PTR _tmpPoint$232995[esp+296]
	mov	edx, DWORD PTR _tmpPoint$232995[esp+292]
	push	ebx
	push	eax
	add	ecx, -16				; fffffff0H
	add	edx, -4					; fffffffcH
	push	ecx
	push	edx
	mov	edx, DWORD PTR _dc$232946[esp+308]
	mov	eax, DWORD PTR [edx+92]
	lea	ecx, DWORD PTR _dc$232946[esp+308]
	call	eax
	mov	BYTE PTR __$EHRec$[esp+300], 3
	mov	eax, DWORD PTR $T246624[esp+292]
	add	eax, -16				; fffffff0H
	lea	ecx, DWORD PTR [eax+12]
	or	edx, -1
	lock	 xadd	 DWORD PTR [ecx], edx
	dec	edx
	test	edx, edx
	jg	SHORT $LN129@OnRefresh
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN129@OnRefresh:
	mov	BYTE PTR __$EHRec$[esp+300], 0
	mov	eax, DWORD PTR $T246621[esp+292]
	add	eax, -16				; fffffff0H
	lea	ecx, DWORD PTR [eax+12]
	or	edx, -1
	lock	 xadd	 DWORD PTR [ecx], edx
	dec	edx
	test	edx, edx
	jg	SHORT $LN138@OnRefresh
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN138@OnRefresh:
; Line 127
	mov	ecx, DWORD PTR [esi+24]
	push	ecx
	lea	ecx, DWORD PTR _dc$232946[esp+296]
	call	?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z	; CDC::SelectObject
$LN25@OnRefresh:
; Line 130
	mov	edx, DWORD PTR _tmpPoint$232995[esp+296]
	mov	eax, DWORD PTR _tmpPoint$232995[esp+292]
	push	edx
	push	eax
	lea	ecx, DWORD PTR $T246625[esp+300]
	push	ecx
	lea	ecx, DWORD PTR _dc$232946[esp+304]
	call	?MoveTo@CDC@@QAE?AVCPoint@@HH@Z		; CDC::MoveTo
; Line 131
	jmp	SHORT $LN24@OnRefresh
$LN26@OnRefresh:
; Line 132
	mov	BYTE PTR _lastWPunknown$233001[esp+292], 1
$LN24@OnRefresh:
; Line 134
	mov	edx, DWORD PTR [esi+12]
	cmp	DWORD PTR [edi+edx], 1
	mov	DWORD PTR _wp$233010[esp+292], 1
	jle	$LN33@OnRefresh
	mov	ebx, 120				; 00000078H
	mov	DWORD PTR tv1903[esp+292], ebx
	npad	2
$LL23@OnRefresh:
; Line 135
	lea	eax, DWORD PTR [edi+ebx]
	add	eax, DWORD PTR [esi+12]
	push	OFFSET ??_C@_06HOJDLJEN@SKIPME?$AA@
	mov	eax, DWORD PTR [eax]
	push	eax
	call	__mbscmp
	add	esp, 8
	test	eax, eax
	sete	al
	test	al, al
	je	SHORT $LN20@OnRefresh
; Line 136
	mov	BYTE PTR _lastWPunknown$233001[esp+292], 1
; Line 137
	jmp	$LN22@OnRefresh
$LN20@OnRefresh:
; Line 140
	mov	eax, DWORD PTR [esi+12]
	add	edi, ebx
	mov	edx, DWORD PTR [edi+eax+8]
	lea	eax, DWORD PTR [edi+eax+8]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T246626[esp+308]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR __imp_?ConvertCoordFromPositionToPixel@CRadarScreen@EuroScopePlugIn@@QAE?AUtagPOINT@@VCPosition@2@@Z
; Line 141
	cmp	DWORD PTR [esi+36], -1
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _tmpPoint$232995[esp+292], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _tmpPoint$232995[esp+296], eax
	jne	SHORT $LN19@OnRefresh
; Line 142
	mov	ecx, DWORD PTR _cursorPos$232945[esp+296]
	sub	ecx, eax
	mov	eax, DWORD PTR _cursorPos$232945[esp+292]
	imul	ecx, ecx
	sub	eax, edx
	imul	eax, eax
	add	eax, ecx
	mov	DWORD PTR tv1849[esp+292], eax
	fild	DWORD PTR tv1849[esp+292]
	call	__CIsqrt
	fcomp	QWORD PTR __real@4024000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN53@OnRefresh
	mov	eax, DWORD PTR _i$232987[esp+292]
	jmp	SHORT $LN54@OnRefresh
$LN53@OnRefresh:
	or	eax, -1
$LN54@OnRefresh:
	mov	DWORD PTR [esi+36], eax
$LN19@OnRefresh:
; Line 146
	mov	edx, DWORD PTR $T246611[esp+292]
	push	edx
	lea	ecx, DWORD PTR _dc$232946[esp+296]
	call	?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z	; CDC::SelectObject
; Line 147
	mov	eax, DWORD PTR $T246615[esp+292]
	push	eax
	lea	ecx, DWORD PTR _dc$232946[esp+296]
	call	?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject
; Line 148
	mov	eax, DWORD PTR _tmpPoint$232995[esp+296]
	mov	edx, DWORD PTR _tmpPoint$232995[esp+292]
	lea	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _dc$232946[esp+300]
	lea	ebx, DWORD PTR [edx+4]
	push	ebx
	add	eax, -4					; fffffffcH
	push	eax
	add	edx, -4					; fffffffcH
	push	edx
	push	ecx
	call	DWORD PTR __imp__Rectangle@20
; Line 151
	mov	eax, DWORD PTR _tmpPoint$232995[esp+292]
; Line 152
	mov	edx, DWORD PTR _tmpPoint$232995[esp+296]
; Line 155
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	0
	sub	esp, 16					; 00000010H
	lea	ecx, DWORD PTR [eax-24]
	lea	edi, DWORD PTR [eax+24]
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	lea	ebx, DWORD PTR [edx-24]
	mov	DWORD PTR [eax+4], ebx
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	add	edx, 24					; 00000018H
	mov	DWORD PTR [eax+8], edi
	push	0
	mov	ecx, esi
	mov	DWORD PTR [eax+12], edx
	call	DWORD PTR __imp_?AddScreenObject@CRadarScreen@EuroScopePlugIn@@QAEXHPBDUtagRECT@@_N0@Z
; Line 158
	mov	eax, DWORD PTR _tmpPoint$232995[esp+296]
	mov	edx, DWORD PTR _tmpPoint$232995[esp+292]
	lea	ecx, DWORD PTR [eax+28]
	add	eax, 8
	mov	DWORD PTR _tmpRect$232999[esp+296], eax
; Line 159
	mov	eax, DWORD PTR tv1903[esp+292]
	add	eax, DWORD PTR tv1926[esp+292]
	lea	edi, DWORD PTR [edx+20]
	add	eax, DWORD PTR [esi+12]
	add	edx, -20				; ffffffecH
	push	0
	mov	DWORD PTR _tmpRect$232999[esp+296], edx
	mov	DWORD PTR _tmpRect$232999[esp+308], ecx
	mov	DWORD PTR _tmpRect$232999[esp+304], edi
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax-12]
	push	261					; 00000105H
	lea	edx, DWORD PTR _tmpRect$232999[esp+300]
	push	edx
	push	ecx
	push	eax
	mov	eax, DWORD PTR _dc$232946[esp+312]
	mov	edx, DWORD PTR [eax+108]
	lea	ecx, DWORD PTR _dc$232946[esp+312]
	call	edx
; Line 161
	cmp	BYTE PTR ?Lines@NATShow@@2_NA, 0	; NATShow::Lines
	je	$LN18@OnRefresh
	cmp	BYTE PTR _lastWPunknown$233001[esp+292], 0
	jne	$LN18@OnRefresh
; Line 163
	mov	eax, DWORD PTR [esi+12]
	mov	edi, DWORD PTR tv1926[esp+292]
	cmp	BYTE PTR [eax+edi+580], 0
	je	SHORT $LN17@OnRefresh
; Line 164
	mov	eax, DWORD PTR _hpen_concorde$232962[esp+292]
	test	eax, eax
	je	SHORT $LN189@OnRefresh
	mov	ecx, DWORD PTR _dc$232946[esp+296]
	push	eax
	push	ecx
	jmp	SHORT $LN364@OnRefresh
$LN17@OnRefresh:
; Line 165
	cmp	DWORD PTR [eax+edi+8], 1
	jne	SHORT $LN15@OnRefresh
; Line 166
	mov	eax, DWORD PTR _hpen_east$232960[esp+292]
	test	eax, eax
	je	SHORT $LN189@OnRefresh
	mov	edx, DWORD PTR _dc$232946[esp+296]
	push	eax
	push	edx
; Line 167
	jmp	SHORT $LN364@OnRefresh
$LN15@OnRefresh:
; Line 168
	mov	eax, DWORD PTR _hpen_west$232961[esp+292]
	test	eax, eax
	je	SHORT $LN189@OnRefresh
	push	eax
	mov	eax, DWORD PTR _dc$232946[esp+300]
	push	eax
$LN364@OnRefresh:
	call	DWORD PTR __imp__SelectObject@8
$LN189@OnRefresh:
; Line 170
	cmp	BYTE PTR ?DottedLines@NATShow@@2_NA, 0	; NATShow::DottedLines
	jne	$LN13@OnRefresh
	cmp	BYTE PTR ?AntialiasedLine@NATShow@@2_NA, 0 ; NATShow::AntialiasedLine
	je	$LN13@OnRefresh
; Line 171
	mov	ecx, DWORD PTR [esi+12]
	cmp	DWORD PTR [edi+ecx+8], 1
	lea	eax, DWORD PTR [edi+ecx]
	jne	SHORT $LN57@OnRefresh
	mov	ebx, DWORD PTR _line_east$232957[esp+296]
	jmp	SHORT $LN56@OnRefresh
$LN57@OnRefresh:
	cmp	BYTE PTR [eax+580], 0
	mov	ebx, DWORD PTR _line_concorde$232959[esp+296]
	jne	SHORT $LN56@OnRefresh
	mov	ebx, DWORD PTR _line_west$232958[esp+296]
$LN56@OnRefresh:
	mov	eax, DWORD PTR _dc$232946[esp+300]
	lea	edx, DWORD PTR _point$246972[esp+292]
	push	edx
	push	eax
	call	DWORD PTR __imp__GetCurrentPositionEx@8
	mov	eax, DWORD PTR _dc$232946[esp+300]
	mov	ecx, DWORD PTR _point$246972[esp+292]
	mov	edi, DWORD PTR _point$246972[esp+296]
	lea	edx, DWORD PTR _point$246981[esp+292]
	push	edx
	push	eax
	mov	DWORD PTR $T246633[esp+300], ecx
	call	DWORD PTR __imp__GetCurrentPositionEx@8
	mov	ecx, DWORD PTR _tmpPoint$232995[esp+296]
	mov	edx, DWORD PTR _tmpPoint$232995[esp+292]
	push	ebx
	push	ecx
	push	edx
	mov	edx, DWORD PTR _point$246981[esp+304]
	mov	eax, edi
	lea	ebx, DWORD PTR _dc$232946[esp+304]
	call	?DrawWuLine@@YAXPAVCDC@@HHHHK@Z		; DrawWuLine
	add	esp, 12					; 0000000cH
; Line 172
	jmp	SHORT $LN11@OnRefresh
$LN13@OnRefresh:
; Line 173
	mov	eax, DWORD PTR _tmpPoint$232995[esp+296]
	mov	ecx, DWORD PTR _tmpPoint$232995[esp+292]
	push	eax
	push	ecx
	lea	ecx, DWORD PTR _dc$232946[esp+300]
	call	?LineTo@CDC@@QAEHHH@Z			; CDC::LineTo
; Line 174
	jmp	SHORT $LN11@OnRefresh
$LN18@OnRefresh:
; Line 175
	mov	BYTE PTR _lastWPunknown$233001[esp+292], 0
$LN11@OnRefresh:
; Line 176
	mov	edx, DWORD PTR _tmpPoint$232995[esp+296]
	mov	eax, DWORD PTR _tmpPoint$232995[esp+292]
	push	edx
	push	eax
	lea	ecx, DWORD PTR $T246635[esp+300]
	push	ecx
	lea	ecx, DWORD PTR _dc$232946[esp+304]
	call	?MoveTo@CDC@@QAE?AVCPoint@@HH@Z		; CDC::MoveTo
	mov	edi, DWORD PTR tv1926[esp+292]
	mov	ebx, DWORD PTR tv1903[esp+292]
$LN22@OnRefresh:
; Line 134
	mov	eax, DWORD PTR _wp$233010[esp+292]
	mov	edx, DWORD PTR [esi+12]
	inc	eax
	add	ebx, 24					; 00000018H
	mov	DWORD PTR _wp$233010[esp+292], eax
	mov	DWORD PTR tv1903[esp+292], ebx
	cmp	eax, DWORD PTR [edi+edx]
	jl	$LL23@OnRefresh
$LN33@OnRefresh:
; Line 90
	mov	eax, DWORD PTR _i$232987[esp+292]
	inc	eax
	add	edi, 584				; 00000248H
	mov	DWORD PTR _i$232987[esp+292], eax
	mov	DWORD PTR tv1926[esp+292], edi
	cmp	eax, DWORD PTR tv1357[esp+292]
	jl	$LL34@OnRefresh
$LN32@OnRefresh:
; Line 183
	cmp	DWORD PTR [esi+36], 0
	jl	$LN282@OnRefresh
; Line 184
	mov	eax, DWORD PTR $T246611[esp+292]
	push	eax
	lea	ecx, DWORD PTR _dc$232946[esp+296]
	call	?SelectObject@CDC@@QAEPAVCPen@@PAV2@@Z	; CDC::SelectObject
; Line 185
	mov	ecx, DWORD PTR $T246615[esp+292]
	push	ecx
	lea	ecx, DWORD PTR _dc$232946[esp+296]
	call	?SelectObject@CDC@@QAEPAVCBrush@@PAV2@@Z ; CDC::SelectObject
; Line 186
	mov	ebx, DWORD PTR _cursorPos$232945[esp+296]
; Line 187
	mov	edi, DWORD PTR _cursorPos$232945[esp+292]
; Line 190
	mov	edx, DWORD PTR _dc$232946[esp+296]
	add	ebx, 15					; 0000000fH
	add	edi, 15					; 0000000fH
	lea	ecx, DWORD PTR [ebx+45]
	push	ecx
	lea	eax, DWORD PTR [edi+170]
	push	eax
	push	ebx
	push	edi
	push	edx
	mov	DWORD PTR _rect$232954[esp+312], edi
	call	DWORD PTR __imp__Rectangle@20
; Line 191
	call	?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ ; AfxGetStringManager
	xor	ecx, ecx
	test	eax, eax
	setne	cl
	test	ecx, ecx
	jne	SHORT $LN217@OnRefresh
	push	-2147467259				; 80004005H
	call	?AtlThrowImpl@ATL@@YGXJ@Z		; ATL::AtlThrowImpl
$LN366@OnRefresh:
$LN217@OnRefresh:
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	eax, 16					; 00000010H
	mov	DWORD PTR _str$233032[esp+292], eax
	mov	BYTE PTR __$EHRec$[esp+300], 5
; Line 192
	mov	eax, DWORD PTR [esi+36]
	imul	eax, 584				; 00000248H
	add	eax, DWORD PTR [esi+12]
	cmp	BYTE PTR [eax+580], 0
	je	SHORT $LN9@OnRefresh
; Line 193
	movsx	eax, BYTE PTR [eax+4]
	push	eax
	lea	ecx, DWORD PTR _str$233032[esp+296]
	push	OFFSET ??_C@_0BH@ONKKIKM@NAT?3S?$CFc?5?5?5Concorde?5SST?$AA@
	push	ecx
	call	?Format@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::Format
	add	esp, 12					; 0000000cH
; Line 194
	jmp	SHORT $LN8@OnRefresh
$LN9@OnRefresh:
; Line 195
	cmp	DWORD PTR [eax+8], 1
	mov	ecx, OFFSET ??_C@_04DHLACFEG@East?$AA@
	je	SHORT $LN60@OnRefresh
	mov	ecx, OFFSET ??_C@_04KCPCHGPD@West?$AA@
$LN60@OnRefresh:
	mov	edx, DWORD PTR [eax+576]
	movsx	eax, BYTE PTR [eax+4]
	push	ecx
	push	edx
	push	eax
	lea	ecx, DWORD PTR _str$233032[esp+304]
	push	OFFSET ??_C@_0BF@EKOGINPJ@NAT?3?$CFc?5?5?5TMI?3?$CFd?5?5?5?$CFs?$AA@
	push	ecx
	call	?Format@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::Format
	add	esp, 20					; 00000014H
$LN8@OnRefresh:
; Line 196
	mov	ecx, DWORD PTR _str$233032[esp+292]
	mov	eax, DWORD PTR [ecx-12]
	push	eax
	push	ecx
	lea	edx, DWORD PTR [ebx+4]
	push	edx
	mov	edx, DWORD PTR _dc$232946[esp+304]
	lea	eax, DWORD PTR [edi+4]
	push	eax
	mov	eax, DWORD PTR [edx+92]
	lea	ecx, DWORD PTR _dc$232946[esp+308]
	call	eax
; Line 197
	mov	ecx, DWORD PTR [esi+36]
	mov	edx, DWORD PTR [esi+12]
	imul	ecx, 584				; 00000248H
	cmp	BYTE PTR [ecx+edx+580], 0
; Line 198
	lea	ecx, DWORD PTR $T246638[esp+292]
	jne	$LN7@OnRefresh
	push	OFFSET ??_C@_04EMLCEKPO@FLs?3?$AA@
	call	??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
	mov	BYTE PTR __$EHRec$[esp+300], 6
	mov	eax, DWORD PTR $T246638[esp+292]
	mov	ecx, DWORD PTR [eax-12]
	mov	edx, DWORD PTR _dc$232946[esp+292]
	push	ecx
	push	eax
	lea	eax, DWORD PTR [ebx+18]
	push	eax
	mov	eax, DWORD PTR [edx+92]
	add	edi, 6
	push	edi
	lea	ecx, DWORD PTR _dc$232946[esp+308]
	call	eax
	mov	BYTE PTR __$EHRec$[esp+300], 5
	mov	eax, DWORD PTR $T246638[esp+292]
	add	eax, -16				; fffffff0H
	lea	ecx, DWORD PTR [eax+12]
	or	edx, -1
	lock	 xadd	 DWORD PTR [ecx], edx
	dec	edx
	test	edx, edx
	jg	SHORT $LN248@OnRefresh
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN248@OnRefresh:
; Line 199
	xor	edi, edi
$LN6@OnRefresh:
; Line 200
	mov	ecx, DWORD PTR [esi+36]
	mov	edx, DWORD PTR [esi+12]
	imul	ecx, 146				; 00000092H
	add	ecx, edi
	mov	eax, DWORD PTR [edx+ecx*4+12]
	test	eax, eax
	je	$LN273@OnRefresh
; Line 202
	push	eax
	lea	eax, DWORD PTR _str$233032[esp+296]
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	eax
	call	?Format@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::Format
; Line 203
	mov	ecx, DWORD PTR _str$233032[esp+304]
	mov	ecx, DWORD PTR [ecx-12]
	mov	eax, -858993459				; cccccccdH
	mul	edi
	mov	eax, DWORD PTR _str$233032[esp+304]
	shr	edx, 2
	add	esp, 12					; 0000000cH
	push	ecx
	lea	ecx, DWORD PTR [edx+edx*2]
	push	eax
	lea	eax, DWORD PTR [ebx+ecx*4+18]
	lea	ecx, DWORD PTR [edx+edx*4]
	mov	edx, edi
	sub	edx, ecx
	imul	edx, 25					; 00000019H
	push	eax
	mov	eax, DWORD PTR _rect$232954[esp+304]
	lea	ecx, DWORD PTR [edx+eax+37]
	mov	edx, DWORD PTR _dc$232946[esp+304]
	mov	eax, DWORD PTR [edx+92]
	push	ecx
	lea	ecx, DWORD PTR _dc$232946[esp+308]
	call	eax
	inc	edi
	cmp	edi, 15					; 0000000fH
	jl	SHORT $LN6@OnRefresh
; Line 204
	jmp	SHORT $LN273@OnRefresh
$LN7@OnRefresh:
; Line 206
	push	OFFSET ??_C@_09FFOGKOIK@FLs?3?5500?$CL?$AA@
	call	??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
	mov	BYTE PTR __$EHRec$[esp+300], 7
	mov	eax, DWORD PTR $T246639[esp+292]
	mov	ecx, DWORD PTR [eax-12]
	mov	edx, DWORD PTR _dc$232946[esp+292]
	push	ecx
	push	eax
	mov	eax, DWORD PTR [edx+92]
	add	ebx, 18					; 00000012H
	push	ebx
	add	edi, 6
	push	edi
	lea	ecx, DWORD PTR _dc$232946[esp+308]
	call	eax
	mov	BYTE PTR __$EHRec$[esp+300], 5
	mov	eax, DWORD PTR $T246639[esp+292]
	add	eax, -16				; fffffff0H
	lea	ecx, DWORD PTR [eax+12]
	or	edx, -1
	lock	 xadd	 DWORD PTR [ecx], edx
	dec	edx
	test	edx, edx
	jg	SHORT $LN273@OnRefresh
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN273@OnRefresh:
; Line 208
	mov	ecx, esi
	call	DWORD PTR __imp_?RequestRefresh@CRadarScreen@EuroScopePlugIn@@QAEXXZ
; Line 209
	mov	BYTE PTR __$EHRec$[esp+300], 0
	mov	eax, DWORD PTR _str$233032[esp+292]
	add	eax, -16				; fffffff0H
	lea	ecx, DWORD PTR [eax+12]
	or	edx, -1
	lock	 xadd	 DWORD PTR [ecx], edx
	dec	edx
	test	edx, edx
	jg	SHORT $LN282@OnRefresh
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN282@OnRefresh:
; Line 212
	cmp	BYTE PTR ?Loading@NATShow@@2_NA, 0	; NATShow::Loading
	je	$LN340@OnRefresh
; Line 213
	call	?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ ; AfxGetStringManager
	xor	ecx, ecx
	test	eax, eax
	setne	cl
	test	ecx, ecx
	jne	SHORT $LN299@OnRefresh
	push	-2147467259				; 80004005H
	call	?AtlThrowImpl@ATL@@YGXJ@Z		; ATL::AtlThrowImpl
$LN367@OnRefresh:
$LN299@OnRefresh:
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	lea	esi, DWORD PTR [eax+16]
	mov	DWORD PTR $T246640[esp+292], esi
	mov	ecx, OFFSET ??_C@_0BE@BGMOGNCJ@Loading?5NAT?5Data?4?4?4?$AA@
	mov	BYTE PTR __$EHRec$[esp+300], 8
	test	ecx, -65536				; ffff0000H
	jne	SHORT $LN352@OnRefresh
	mov	edx, ecx
	movzx	edi, dx
	push	edi
	call	?AfxFindStringResourceHandle@@YGPAUHINSTANCE__@@I@Z ; AfxFindStringResourceHandle
	test	eax, eax
	je	SHORT $LN321@OnRefresh
	push	edi
	push	eax
	lea	ecx, DWORD PTR $T246640[esp+300]
	call	?LoadStringA@?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEHPAUHINSTANCE__@@I@Z ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::LoadStringA
	jmp	SHORT $LN365@OnRefresh
$LN352@OnRefresh:
	push	19					; 00000013H
	push	OFFSET ??_C@_0BE@BGMOGNCJ@Loading?5NAT?5Data?4?4?4?$AA@
	lea	ecx, DWORD PTR $T246640[esp+300]
	call	?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString
$LN365@OnRefresh:
	mov	esi, DWORD PTR $T246640[esp+292]
$LN321@OnRefresh:
	mov	BYTE PTR __$EHRec$[esp+300], 9
	mov	edx, DWORD PTR [esi-12]
	mov	eax, DWORD PTR _radarArea$[esp+304]
	mov	ecx, DWORD PTR _radarArea$[esp+300]
	push	edx
	add	eax, -26				; ffffffe6H
	push	esi
	add	ecx, -150				; ffffff6aH
	push	eax
	mov	eax, DWORD PTR _dc$232946[esp+304]
	mov	edx, DWORD PTR [eax+92]
	push	ecx
	lea	ecx, DWORD PTR _dc$232946[esp+308]
	call	edx
	lea	eax, DWORD PTR [esi-16]
	mov	BYTE PTR __$EHRec$[esp+300], 0
	lea	ecx, DWORD PTR [eax+12]
	or	edx, -1
	lock	 xadd	 DWORD PTR [ecx], edx
	dec	edx
	test	edx, edx
	jg	SHORT $LN340@OnRefresh
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN340@OnRefresh:
; Line 218
	mov	ecx, DWORD PTR _hpen_east$232960[esp+292]
	mov	esi, DWORD PTR __imp__DeleteObject@4
	push	ecx
	call	esi
; Line 219
	mov	edx, DWORD PTR _hpen_west$232961[esp+292]
	push	edx
	call	esi
; Line 220
	mov	eax, DWORD PTR _hpen_concorde$232962[esp+292]
	push	eax
	call	esi
; Line 221
	mov	ecx, DWORD PTR $T246611[esp+292]
	test	ecx, ecx
	je	SHORT $LN61@OnRefresh
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	1
	call	eax
$LN61@OnRefresh:
; Line 222
	mov	ecx, DWORD PTR $T246615[esp+292]
	test	ecx, ecx
	je	SHORT $LN63@OnRefresh
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	1
	call	eax
$LN63@OnRefresh:
; Line 224
	mov	ecx, DWORD PTR _oldFont$232947[esp+292]
	push	ecx
	lea	ecx, DWORD PTR _dc$232946[esp+296]
	call	?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z	; CDC::SelectObject
; Line 226
	lea	ecx, DWORD PTR _dc$232946[esp+292]
	call	?Detach@CDC@@QAEPAUHDC__@@XZ		; CDC::Detach
; Line 227
	lea	ecx, DWORD PTR _dc$232946[esp+292]
	mov	DWORD PTR __$EHRec$[esp+300], -1
	call	??1CDC@@UAE@XZ				; CDC::~CDC
$LN36@OnRefresh:
; Line 228
	mov	ecx, DWORD PTR __$EHRec$[esp+292]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+276]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
$LN363@OnRefresh:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$0:
	lea	ecx, DWORD PTR _dc$232946[ebp]
	jmp	??1CDC@@UAE@XZ				; CDC::~CDC
__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$1:
	mov	eax, DWORD PTR $T246612[ebp]
	push	eax
	call	??3CObject@@SGXPAX@Z			; CObject::operator delete
	ret	0
__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$2:
	mov	eax, DWORD PTR $T246616[ebp]
	push	eax
	call	??3CObject@@SGXPAX@Z			; CObject::operator delete
	ret	0
__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$3:
	lea	ecx, DWORD PTR $T246621[ebp]
	jmp	??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$4:
	lea	ecx, DWORD PTR $T246624[ebp]
	jmp	??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$5:
	lea	ecx, DWORD PTR _str$233032[ebp]
	jmp	??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$6:
	lea	ecx, DWORD PTR $T246638[ebp]
	jmp	??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$7:
	lea	ecx, DWORD PTR $T246639[ebp]
	jmp	??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$9:
	lea	ecx, DWORD PTR $T246640[ebp]
	jmp	??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ	; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
__unwindfunclet$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z$8:
	lea	ecx, DWORD PTR $T246640[ebp]
	jmp	??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
__ehhandler$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-276]
	mov	ecx, DWORD PTR [edx-280]
	xor	ecx, eax
	call	@__security_check_cookie@4
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?OnRefresh@euroNatRadarScreen@@UAEXPAUHDC__@@H@Z ENDP	; euroNatRadarScreen::OnRefresh
END
